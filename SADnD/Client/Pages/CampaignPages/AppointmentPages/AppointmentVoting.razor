@page "/vote-appointments/{CampaignId}"
@using Newtonsoft.Json

<h3>Terminplanung</h3>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-12 col-xl-6">
            <EditForm Model="appointmentVotes" OnValidSubmit="Post">
                <DataAnnotationsValidator />
                <table class="table table-sm table-hover table-striped align-middle">
                    @if (listOfAppointments != null && listOfAppointments.Any()) {
                        <thead>
                            <tr>
                                <td>Datum</td>
                                <td>Zeit</td>
                                <td>Vote</td>
                                <td>Kommentar</td>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listOfAppointments != null && listOfAppointments.Any()) {
                                @for (int i = 0; i < listOfAppointments.Count(); i++) {
                                    var appointment = listOfAppointments.ElementAt(i);
                                    var userVote = appointmentVotes.FirstOrDefault(v => v.AppointmentId == appointment.Id);

                                    <tr>
                                        <td>@appointment.Date.ToShortDateString()</td>
                                        <td>@appointment.StartTime.ToShortTimeString() - @appointment.EndTime.ToShortTimeString()</td>
                                        <td>
                                            @if(userVote != null) {
                                                <InputSelect @bind-Value="userVote.Reaction" class="form-select" >
                                                    <option value="">Wählen...</option>
                                                    <option value="yes">Ja</option>
                                                    <option value="no">Nein</option>
                                                    <option value="maybe">Vielleicht</option>
                                                </InputSelect>
                                            }
                                            else{
                                                <span>Keine Abstimmung möglich</span>
                                            }
                                            
                                        </td>
                                        <td>
                                            @if (userVote != null) {
                                                <InputText @bind-Value="userVote.Comment" class="form-control" />
                                            }
                                            else{
                                                <span>Keine Abstimmung möglich</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else {
                                <tr>
                                    <td colspan="4">Daten werden geladen oder es gibt keine Daten</td>
                                </tr>
                            }
                        </tbody>
                    }
                </table>
                <FormButtons />
                <ValidationSummary class="mt-3" />
            </EditForm>
            <div class="mt-3">
                @UIMessage
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private CascadingAppState appState { get; set; }
    [Parameter]
    public required string CampaignId { get; set; }

    private Campaign campaign = new();

    public IEnumerable<Appointment>? listOfAppointments;
    public List<AppointmentVote> appointmentVotes = new();

    private string UIMessage = "";

    protected override async Task OnInitializedAsync() {
        Console.WriteLine($"CampaignId: {CampaignId}");
        await appState.EnsureCampaigns();

        
        campaign = appState.Campaigns.FirstOrDefault(c => c.Id == CampaignId); // Kampagne abrufen

        GetAppointmentsToVote();    // Offene Termine abrufen
        Console.WriteLine($"listOfAppointments: {JsonConvert.SerializeObject(listOfAppointments)}");
        Console.WriteLine($"listOfAppointments.Count(): {listOfAppointments.Count()}");
        AppointmentVoteInital();    // Initialisieren der Abstimmungsliste
        Console.WriteLine($"appointmentVotes: {JsonConvert.SerializeObject(appointmentVotes)}");
    }

    private void GetAppointmentsToVote(){
        DateOnly today = DateOnly.FromDateTime(DateTime.Today);

        if (campaign.Appointments != null && campaign.Appointments.Any(x => !x.Accepted)) {
            listOfAppointments = campaign.Appointments
                .Where(x => !x.Accepted && x.Date >= today)
                .OrderBy(x => x.Date);
        }
    }

    private void AppointmentVoteInital (){

        var currentUserId = appState.UserId;

        appointmentVotes = listOfAppointments?.Select(appointment => new AppointmentVote {
            AppointmentId = appointment.Id,
            UserId = currentUserId,
            Reaction = "", // Standardwert
            Comment = ""   // Standardwert
        }).ToList() ?? new List<AppointmentVote>();
    }

    private async void Post() { 
        try {
            // hier sollen die resultate gespeichert werden
            foreach (var vote in appointmentVotes){
                Console.WriteLine($"speichern von: {JsonConvert.SerializeObject(vote)}");
            }
        }
        catch (Exception ex) {
            
            UIMessage = ex.Message;
        }
    }
}
