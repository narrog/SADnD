@page "/join-campaign"

@attribute [Authorize]
@using Newtonsoft.Json
@inject IJSRuntime js

@inject JoinRequestManager joinRequestManager
@inject CampaignManager campaignManager

<h3>Kampagne beitreten</h3>

<EditForm Model="@joinRequest" OnValidSubmit="@Post">
    <DataAnnotationsValidator /> 
    Zugangscode:
    <InputText @bind-Value="@joinRequest.CampaignId"></InputText>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary me-2">Speichern</button>
        <button class="btn btn-secondary" type="button" @onclick="CancelButtonPressed">Zurück</button>
    </div>
    <ValidationSummary class="mt-3" />
</EditForm>

<div class="mt-3">
    @UIMessage
</div>

@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    private JoinRequest joinRequest = new();
    private IEnumerable<Campaign>? allCampaigns;
    private bool campaignValidity = false;
    string UIMessage = "";

    protected override async Task OnInitializedAsync() {
        joinRequest.UserId = appState.UserId;
    }

    private async void Post() {
        try {
            await joinRequestManager.Insert(joinRequest);
            UIMessage = "Anfrage versendet";
            joinRequest.CampaignId = ""; 

            StateHasChanged(); 
        }
        catch (Exception ex) {
            UIMessage = $"Fehler: {ex.Message}";
            StateHasChanged();
        }
    }


    private async void CancelButtonPressed() {
        bool confirm = await js.InvokeAsync<bool>("confirm", "Eingabe wirklich abbrechen");
        if (confirm)
            await js.InvokeVoidAsync("history.back");
        else
            return;
    }
}
