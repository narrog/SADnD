@page "/join-campaign"

@attribute [Authorize]
@using Newtonsoft.Json
@inject IJSRuntime js

@inject JoinRequestManager joinRequestManager
@inject CampaignManager campaignManager

<h3>Kampagne beitreten</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-md-4 mt-3">
            <EditForm Model="@joinRequest" OnValidSubmit="@Post">
                <DataAnnotationsValidator /> 
                <label for="code">Zugangscode:</label>
                <InputText @bind-Value="@joinRequest.CampaignId" @oninput="@(e => joinRequest.CampaignId = e.Value.ToString().ToUpper())" id="code" class="form-control"></InputText>

                <div class="mt-3">
                    <button type="submit" class="btn btn-primary me-2">Speichern</button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelButtonPressed">Zurück</button>
                </div>
                <ValidationSummary class="mt-3" />
            </EditForm>

            <div class="mt-3">
                @UIMessage
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    private JoinRequest joinRequest = new();
    private IEnumerable<JoinRequest>? allJoinRequests;
    private bool doubleRequest;
    string UIMessage = "";

    // private IEnumerable<Campaign>? allCampaigns;
    // private bool validRequest;

    protected override async Task OnInitializedAsync() {
        joinRequest.UserId = appState.UserId;

        allJoinRequests = await joinRequestManager.GetAll();
        // allCampaigns = await campaignManager.GetAll();              // <- Holt nur Kampagnen vom Benutzer ab, nicht alle
    }

    private async void Post() {
        try {
            CheckForDoubleRequests(joinRequest);
            // CheckForValidRequest(joinRequest.CampaignId);
            if (doubleRequest) {
                UIMessage = "Anfrage bereits ausstehend";
            }
            // else if (!validRequest) {
            //     UIMessage = "Zugangscode ungültig";
            // }
            else {
                await joinRequestManager.Insert(joinRequest);
                await js.InvokeVoidAsync("alert", "Anfrage versendet");
                await js.InvokeVoidAsync("history.back");
            }
                
        }
        catch (Exception ex) {
            UIMessage = $"Fehler: {ex.Message}";
            StateHasChanged();
        }
    }

    private void CheckForDoubleRequests(JoinRequest joinRequest) {
        if (allJoinRequests == null) return;

        doubleRequest = allJoinRequests.Any(jr => 
            jr.UserId == joinRequest.UserId && 
            jr.CampaignId == joinRequest.CampaignId);
    }
    
    // private void CheckForValidRequest(string accessCode) {
    //     if (allCampaigns == null) return;

    //     validRequest = allCampaigns.Any(x => x.Id == accessCode);
    // }

    private async void CancelButtonPressed() {
        bool confirm = await js.InvokeAsync<bool>("confirm", "Eingabe wirklich abbrechen");
        if (confirm)
            await js.InvokeVoidAsync("history.back");
        else
            return;
    }
}
