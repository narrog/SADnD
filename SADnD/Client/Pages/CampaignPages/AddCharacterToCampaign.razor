@inject CharacterApiManager characterManager
@inject CampaignApiManager campaignManager

<h3>Charakter zuweisen</h3>

<EditForm Model="@selectedCharacter" OnValidSubmit="Post" class="w-100">
    <DataAnnotationsValidator />

    @if (charactersFromUser != null) {
        <label for="character">Name:</label>
        <InputSelect @bind-Value="SelectedCharacterId" class="form-select" id="character">
            <option selected value="0">Bitte auswählen</option>
            @foreach (var userCharacter in charactersFromUser) {
                <option value="@userCharacter.Id">@userCharacter.Name</option>
            }
        </InputSelect>
    }
    <br /><br />
    <SubmitButton />
    <button class="btn btn-outline-secondary me-2" type="button" @onclick="Close">Abbrechen</button>
    <a href="/new-character/" class="btn btn-outline-primary me-2" titel="Neuen Charakter erstellen">Charakter erstellen</a>

    <ValidationSummary class="mt-3" />
    @if (!string.IsNullOrEmpty(UIMessage)) {
        <ul class="mt-3">
            <li class="validation-message">
                @UIMessage
            </li>
        </ul>
    }
</EditForm>

@if (selectedCharacter.Id != 0) {
    <div class="mt-2">
        <p>
            <strong>Name:</strong> @selectedCharacter.Name <br />
            <strong>Rasse:</strong> @selectedCharacter.Race.Name <br />
            <strong>Klassen:</strong><br />
            @if (selectedCharacter.Classes != null) {
                <ul>
                    @foreach (var characterClass in selectedCharacter.Classes) {
                        <li>@characterClass.Class.Name - Level: @characterClass.Level</li>
                    }
                </ul>
            }

        </p>
    </div>
}



@code {
    [Parameter]
    public required Campaign Campaign { get; set; }
    [Parameter]
    public Character? OriginalCharacter { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }

    private IEnumerable<Character>? charactersFromUser;
    private Character selectedCharacter = new();

    private string UIMessage = "";

    private int selectedCharacterId;
    public int SelectedCharacterId {
        get => selectedCharacterId;
        set {
            selectedCharacterId = value;

            selectedCharacter = charactersFromUser?.FirstOrDefault(c => c.Id == selectedCharacterId) ?? new Character();
        }
    }

    protected override async Task OnInitializedAsync() {
        charactersFromUser = await characterManager.GetAll();

        if (charactersFromUser != null && !charactersFromUser.Any(c => c.Id == selectedCharacterId)) {
            selectedCharacter = new Character();
        }
    }

    private async void Post() {

        try {
            if (SelectedCharacterId == 0) {
                UIMessage = "Charakter muss ausgewählt werden";
                StateHasChanged();
                return;
            }
            if (OriginalCharacter != null) {
                Character characterToRemove = await characterManager.GetByID(OriginalCharacter.Id);
                characterToRemove.CampaignId = null;
                await characterManager.Update(characterToRemove);
            }
            selectedCharacter.CampaignId = Campaign.Id;
            await characterManager.Update(selectedCharacter);
            Close();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }
    }

    private async void Close() {
        await OnClose.InvokeAsync();
    }
}
