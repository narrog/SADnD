@page "/campaign-details/{id}"
@attribute [Authorize]
@inject CampaignManager campaignManager
@inject JoinRequestManager joinRequestManager
@inject IJSRuntime js
@using Newtonsoft.Json

<h3>Kampagne "@campaign.Name" - Details</h3>

<div class="container-fluid mt-3">
    <strong>Dungeonmaster: </strong><br />
    @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any()) {
        <p>
            <ul>
                @foreach (var master in campaign.DungeonMasters) {
                    @if (master.UserName != null) {
                        <li>
                            @master.UserName
                        </li>
                    }
                }
            </ul>
        </p>
    }
    else {
        <p>Kein DungeonMaster gefunden</p>
    }
    <p><strong>Zugangscode: </strong>@campaign.Id</p>
    <p>
        <strong>Mitspieler</strong>
        <table class="table table-sm table-hover table-striped align-middle">
            @if (campaign.Players != null && campaign.Players.Any()) {
                <tbody>
                    @foreach (var player in campaign.Players) {
                        <tr>
                            @if (player.UserName != null) {
                                <td>@player.UserName</td>
                            }
                            @* <td>
                                <button class="btn btn-outline-primary me-2" @onclick="() => ShowPlayer(player)">Infos</button>
                                @if (campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
                                    <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(player)">entfernen</button>
                                }
                            </td> *@
                        </tr>
                    }
                </tbody>
            }
            else {
                <tr><td>keine Mitspieler gefunden</td></tr>
            }
        </table>
    </p>
    <p>
        <strong>Offene Anfragen</strong>
        <table class="table table-sm table-hover table-striped align-middle">
            @if (joinRequests != null && joinRequests.Any()) {
                <tbody>
                    @foreach (var request in joinRequests) {
                        <tr>
                            @if (request.User != null) {
                                <td>@request.User.UserName</td>
                            }
                            <td>
                                <button class="btn btn-outline-primary me-2" @onclick="() => JoinRequestAccept(request)">Annehmen</button>
                                <button class="btn btn-outline-danger me-2" @onclick="() => JoinRequestReject(request)">Ablehnen</button>
                            </td>
                            <td>
                                @requestMessage
                            </td>

                        </tr>
                    }
                </tbody>
            }
            else {
                <tr><td>keine offenen Anfragen</td></tr>
            }
        </table>
    </p>
</div>
<div class="row my-4 pt-4 border-top">
    <div>
        <a class="btn btn-secondary me-2" onclick="history.back();">Zurück</a>
        @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
            <button class="btn btn-danger" @onclick="DeleteCampaign">Löschen</button>
        }
    </div>

</div>


@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    [Parameter]
    public required string Id { get; set; }
    private Campaign campaign = new Campaign();
    private IEnumerable<JoinRequest>? joinRequests;
    private string requestMessage = "";
    private string currentUserId;

    protected override async Task OnInitializedAsync() {
        currentUserId = appState.UserId;
        campaign = await campaignManager.GetByID(Id);
        await GetOpenJoinRequests();
    }

    private async Task GetOpenJoinRequests() {
        joinRequests = await joinRequestManager.GetAll();
        joinRequests = joinRequests.Where(x => x.CampaignId == Id && x.Accepted == null);
    }
    private async void JoinRequestReject(JoinRequest joinRequest) {
        if (joinRequest != null) {
            await joinRequestManager.Delete(joinRequest.Id);
            await js.InvokeVoidAsync("alert", "Beitrittsanfrage abgelehnt");
            await GetOpenJoinRequests();
        }
        StateHasChanged();
    }
    private async Task JoinRequestAccept(JoinRequest joinRequest) {

        if (joinRequest != null) {
            joinRequest.Accepted = DateTime.UtcNow;
            joinRequest.User = null;
            await joinRequestManager.Update(joinRequest);
            await js.InvokeVoidAsync("alert", "Beitrittsanfrage akzeptiert");
            await GetOpenJoinRequests();
        }
        StateHasChanged();
    }

    private async Task DeleteCampaign() {
        // string toDeleteName = campaign.Name;
        // bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        // if (!confirm) return;

        //await campaignManager.Delete(campaign.Id);

        await js.InvokeVoidAsync("alert", $"Funktion wird später implementiert");
    }

}
