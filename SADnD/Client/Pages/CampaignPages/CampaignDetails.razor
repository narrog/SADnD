@page "/campaign-details/{id}"
@attribute [Authorize]
@inject CampaignManager campaignManager
@inject JoinRequestManager joinRequestManager
@inject IJSRuntime js
@using Newtonsoft.Json

<h3>@campaign.Name</h3>

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-12 col-md-8">
            <strong>Dungeonmaster: </strong><br />
            @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any()) {
                <p>
                    <ul>
                        @foreach (var master in campaign.DungeonMasters) {
                            @if (master.UserName != null) {
                                <li>
                                    @master.UserName
                                </li>
                            }
                        }
                    </ul>
                </p>
            }
            else {
                <p>Kein DungeonMaster gefunden</p>
            }
            <p>
                <strong>Zugangscode: </strong>@campaign.Id
                <span class="oi oi-share-boxed ms-2" @onclick="ShareAccessCode" title="Zugangscode teilen" style="cursor: pointer;" aria-hidden="true"></span>
            </p>
            <p>
                <strong>Mitspieler</strong>
                <table class="table table-sm table-hover table-striped align-middle">
                    @if (campaign.Players != null && campaign.Players.Any()) {
                        <tbody>
                            @foreach (var entry in playerCharacters) {
                                <tr>
                                    @if (entry.User.UserName != null) {
                                        <td>@entry.User.UserName</td>
                                    }
                                    @if(entry.Character != null) {
                                        //GetPlayerCharacter(player);
                                        @if (entry.Character.Name != null) {
                                            <td>@entry.Character.Name</td>
                                        }
                                        <td>
                                            @entry.Character.Race.Name
                                        </td>
                                        <td>
                                            @if (entry.Character.Classes != null & entry.Character.Classes.Any()) {
                                                <ul class="m-0">
                                                    @foreach (var charClass in entry.Character.Classes) {
                                                        <li>@charClass.Class.Name - Level @charClass.Level</li>
                                                    }
                                                </ul>
                                            }
                                        </td>
                                    } 
                                    else {
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    }
                                    <td>
                                        @* <button class="btn btn-outline-primary me-2" @onclick="() => ShowCharacter(player)">Infos</button> *@
                                        @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
                                            <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, true)">entfernen</button>
                                        }
                                        @if (entry.User.Id == currentUserId) {
                                            <button class="btn btn-outline-primary me-2" @onclick="() => ShowAddCharacter(entry.Character)">Zuweisung ändern</button>
                                            <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, false)">austreten</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    }
                    else {
                        <tr><td>keine Mitspieler gefunden</td></tr>
                    }
                </table>
            </p>
            @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
                <p>
                    <strong>Offene Anfragen</strong>
                    <table class="table table-sm table-hover table-striped align-middle">
                        @if (joinRequests != null && joinRequests.Any()) {
                            <tbody>
                                @foreach (var request in joinRequests) {
                                    <tr>
                                        @if (request.User != null) {
                                            <td>@request.User.UserName</td>
                                        }
                                        <td>
                                            <button class="btn btn-outline-primary me-2" @onclick="() => JoinRequestAccept(request)">Annehmen</button>
                                            <button class="btn btn-outline-danger me-2" @onclick="() => JoinRequestReject(request)">Ablehnen</button>
                                        </td>
                                        <td>
                                            @requestMessage
                                        </td>

                                    </tr>
                                }
                            </tbody>
                        }
                        else {
                            <tr><td>keine offenen Anfragen</td></tr>
                        }
                    </table>
                </p>
            }
        </div>
        @if (showAddCharacter) {
            <div class="col-12 col-md-4">
                <AddCharacterToCampaign Campaign="campaign"
                OriginalCharacter="selectedCharacter"
                OnClose="HideAddCharacter" />
            </div>
        }
    </div>
</div>
<div class="row my-4 pt-4 border-top">
    <div>
        <a class="btn btn-secondary me-2" onclick="history.back();">Zurück</a>
        @if (campaign.DungeonMasters != null && campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
            <button class="btn btn-danger" @onclick="DeleteCampaign">Löschen</button>
        }
    </div>
</div>

@if (!string.IsNullOrEmpty(UIMessage)) {
    <div class="row my-4 pt-4">
        <div>
            @UIMessage
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    [Parameter]
    public required string Id { get; set; }
    private Campaign campaign = new Campaign();
    private List<(ApplicationUser User, Character Character)> playerCharacters;
    private Character playerCharacter = new Character();
    private Character? selectedCharacter;
    private IEnumerable<JoinRequest>? joinRequests;
    private string requestMessage = "";
    private string UIMessage = "";
    private string currentUserId = "";
    private bool showAddCharacter;

    protected override async Task OnInitializedAsync() {
        currentUserId = appState.UserId;
        campaign = await campaignManager.GetByID(Id);
        await GetOpenJoinRequests();
        await AllocatePlayersNCharacters();
    }

    private async Task GetOpenJoinRequests() {
        joinRequests = await joinRequestManager.GetAll();
        joinRequests = joinRequests.Where(x => x.CampaignId == Id && x.Accepted == null);
    }
    private async void JoinRequestReject(JoinRequest joinRequest) {
        if (joinRequest != null) {
            await joinRequestManager.Delete(joinRequest.Id);
            UIMessage = $"Beitrittsanfrage abgelehnt";
            await GetOpenJoinRequests();
        }
        StateHasChanged();
    }
    private async Task JoinRequestAccept(JoinRequest joinRequest) {

        if (joinRequest != null) {
            joinRequest.Accepted = DateTime.UtcNow;
            joinRequest.User = null;
            await joinRequestManager.Update(joinRequest);
            UIMessage = $"Beitrittsanfrage akzeptiert";
            await GetOpenJoinRequests();
            campaign = await campaignManager.GetByID(Id);
        }
        StateHasChanged();
    }
    private async Task AllocatePlayersNCharacters()
    {
        campaign = await campaignManager.GetByID(Id);

        foreach (var player in campaign.Players)
        {
            playerCharacters = new List<(ApplicationUser User, Character Character)>();
            Character character = campaign.Characters.FirstOrDefault(c => c.UserId == player.Id);
            playerCharacters.Add((player, character));
        }
    }
    private async Task ShareAccessCode() {
        try {
            if (await js.InvokeAsync<bool>("navigator.canShare", new { text = "Test" })) {
                await js.InvokeVoidAsync("navigator.share", new {
                    title = "Dungeon Kampagne",
                    text = $"Hier ist der Zugangscode: {campaign.Id}"
                });
            }
            else {
                Console.WriteLine("Web Share API wird nicht unterstützt");
            }

        }
        catch (Exception ex) {
            Console.WriteLine($"Fehler beim Teilen: {ex.Message}");
        }
    }
    private void ShowAddCharacter(Character characterToChange) {
        selectedCharacter = characterToChange;
        showAddCharacter = true;
    }
    private async void HideAddCharacter() {
        await AllocatePlayersNCharacters();
        showAddCharacter = false;
        StateHasChanged();
    }

    private async Task RemovePlayer(ApplicationUser playerToDelete, bool isKicked) {

        try {
            string toDeleteName = playerToDelete.UserName;
            string confirmMessage = $"Soll der Spieler '{toDeleteName}' wirklich entfernt werden?";
            string uiMessage = $"Spieler '{toDeleteName}' wurde entfernt";

            if (!isKicked) {
                confirmMessage = $"Möchtest du diese Kampagne wirklich verlassen?";
                uiMessage = $"Kampagne erfolgreich verlassen";
            }


            bool confirm = await js.InvokeAsync<bool>("confirm", $"{confirmMessage}");
            if (!confirm) return;

            if (campaign.Players != null) {
                campaign.Players.Remove(playerToDelete);
                await campaignManager.Update(campaign);
                UIMessage = uiMessage;
                if (!isKicked) {
                    await js.InvokeVoidAsync("history.back");
                }
            }
            else {
                Console.WriteLine($"Spieler '{toDeleteName}' nicht gefunden");
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Exception RemovePlayer: {ex.Message}");
        }

    }

    private async Task DeleteCampaign() {
        string toDeleteName = campaign.Name;
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        if (!confirm) return;

        bool success = await campaignManager.Delete(campaign.Id);

        if (success) {
            UIMessage = $"Kampagne '{toDeleteName}' erfolgreich gelöscht.";
            await js.InvokeVoidAsync("history.back");
        }
        else {
            UIMessage = $"Kampagne '{toDeleteName}' konnte nicht gelöscht werden.";
        }
    }

}
