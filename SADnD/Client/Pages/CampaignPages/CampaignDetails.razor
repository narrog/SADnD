@page "/campaign-details/{id}"
@attribute [Authorize]
@inject SyncRepository<Campaign> campaignManager
@inject SyncRepository<Character> characterManager
@inject SyncRepository<JoinRequest> joinRequestManager
@inject IJSRuntime js
@inherits NotesCategoryParent

<h3>@Campaign.Name</h3>

<CascadingValue Value="@this" IsFixed="true">
    @if(Campaign != null){
        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-12 col-xl-8">
                    <div class="campaign-infos">
                        <strong>Dungeonmaster: </strong><br />
                        @if (Campaign.DungeonMasters != null && Campaign.DungeonMasters.Any()) {
                            <p>
                                <ul>
                                    @foreach (var master in Campaign.DungeonMasters) {
                                        @if (master.UserName != null) {
                                            <li>@master.UserName</li>
                                        }
                                    }
                                </ul>
                            </p>
                        }
                        else {
                            <p>Kein DungeonMaster gefunden</p>
                        }
                        <p>
                            <strong>Zugangscode: </strong>@Campaign.JoinCode
                            <span class="oi oi-share-boxed ms-2" @onclick="ShareAccessCode" title="Zugangscode teilen" style="cursor: pointer;" aria-hidden="true"></span>
                        </p>
                    </div>     
                    <div class="table-responsive co-players">
                        <strong>Mitspieler:</strong>
                        <table class="table table-borderless align-middle border-bottom">
                            @if (Campaign.Players != null && Campaign.Players.Any())
                            {
                                <tbody>
                                    @foreach (var entry in PlayerCharacters)
                                    {                                            
                                        <tr class="border-top">
                                            @if (entry.User.UserName != null)
                                            {
                                                <td>@entry.User.UserName</td>
                                            }
                                            @if (entry.Character != null)
                                            {
                                                <td>@entry.Character.Name</td>
                                                <td>@entry.Character.Race!.Name</td>
                                                <td class="d-none d-md-table-cell">
                                                    @if (entry.Character.Classes != null && entry.Character.Classes.Any())
                                                    {
                                                        <ul class="m-0">
                                                            @foreach (var charClass in entry.Character.Classes)
                                                            {
                                                                <li>@charClass.Class!.Name - Level @charClass.Level</li>
                                                            }
                                                        </ul>
                                                    }
                                                </td>
                                            }
                                            else
                                            {
                                                <td></td>
                                                <td></td>
                                                <td class="d-none d-md-table-cell"></td>
                                            }
                                            <td class="d-none d-md-table-cell">
                                                @if (isDungeonMaster) {
                                                    <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, true)">entfernen</button>
                                                }
                                                @if (entry.User.Id == currentUserId) {
                                                    <button class="btn btn-outline-primary me-2" @onclick="() => ShowAddCharacter(entry.Character)">Zuweisung ändern</button>
                                                    <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, false)">austreten</button>

                                                }
                                                @if (entry.Character != null) {
                                                    <button class="btn btn-outline-secondary me-2" @onclick="() => ShowCharacterDetails(entry.Character)">Info</button>
                                                }
                                            </td>
                                        </tr>
                                        <tr class="d-md-none">
                                            <td colspan="4">
                                                @if (isDungeonMaster) {
                                                    <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, true)">entfernen</button>
                                                }
                                                @if (entry.User.Id == currentUserId) {
                                                    <button class="btn btn-outline-primary me-2" @onclick="() => ShowAddCharacter(entry.Character)">Zuweisung ändern</button>
                                                    <button class="btn btn-outline-danger me-2" @onclick="() => RemovePlayer(entry.User, false)">austreten</button>

                                                }
                                                @if (entry.Character != null) {
                                                    <button class="btn btn-outline-secondary me-2" @onclick="() => ShowCharacterDetails(entry.Character)">Info</button>
                                                }
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            }
                            else
                            {
                                <tr><td>keine Mitspieler gefunden</td></tr>
                            }
                        </table>
                    </div>
                    @if (isDungeonMaster)
                    {
                        <p>
                            <strong>Offene Anfragen</strong>
                            <table class="table table-sm table-hover table-striped align-middle">
                                @if (joinRequests != null && joinRequests.Any())
                                {
                                    <tbody>
                                        @foreach (var request in joinRequests)
                                        {
                                            <tr>
                                                @if (request.User != null)
                                                {
                                                    <td>@request.User.UserName</td>
                                                }
                                                <td>
                                                    <button class="btn btn-outline-primary me-2" @onclick="() => JoinRequestAccept(request)">Annehmen</button>
                                                    <button class="btn btn-outline-danger me-2" @onclick="() => JoinRequestReject(request)">Ablehnen</button>
                                                </td>
                                                <td>
                                                    @requestMessage
                                                </td>

                                            </tr>
                                        }
                                    </tbody>
                                }
                                else {
                                    <tr><td>keine offenen Anfragen</td></tr>
                                }
                            </table>
                        </p>
                    }
                </div>
                <div class="appointments">
                    <p><strong>Termine: </strong>
                        @if (nextAppointments != null) {
                            <ul>
                                @foreach (var appointment in nextAppointments) {
                                    <li>@appointment.Date.ToLongDateString(), @appointment.StartTime.ToShortTimeString() -  @appointment.EndTime.ToShortTimeString() Uhr</li>
                                }
                            </ul>
                        }
                        else {
                            <span>keine fixierten Termine vorhanden</span>
                        }
                    </p>
                    @if (isUserDM) {
                        <a href="new-appointments/@Campaign.Id" class="btn btn-outline-primary" title="Termine eintragen">Termine eintragen</a>
                    }
                    @if (hasAppointmentsToVote) {
                        <a href="open-appointments/@Campaign.Id" class="btn btn-outline-primary ms-2" title="Verfügbarkeiten mitteilen">Umfrage ansehen</a>

                    }
                </div>
            </div>
            @if (showAddCharacter)
            {
                <div class="col-12 col-xl-4 mt-3 mt-xl-0">
                    <AddCharacterToCampaign OriginalCharacter="selectedCharacter"
                    OnClose="HideAddCharacter" />
                </div>
            }
        </div>
        <div class="row">
            @if (isDungeonMaster)
            {

                <div class="col-2 my-1" id="notes-icons-container">
                    <NotesCategoryIcons @bind-ActiveCategory="ActiveCategory"
                    OnCategoryChanged="HandleCategoryChanged"
                    CampaignId="@int.Parse(Id)"
                    ViewTypeIsDM="true" />
                </div>
                <div class="col-10">
                    @if (!ShowAddNotes)
                    {
                        <NotesView NotesCategory="@ActiveCategory"
                        CampaignId="@int.Parse(Id)"
                        OnEditNote="ShowAddNotesAsync"
                        ViewTypeIsDM="true" />

                        <button class="btn btn-secondary mt-1" @onclick="() => ShowAddNotesAsync(0)">Notiz hinzufügen</button>
                    }
                    else
                    {
                        <NotesAdd NotesCategory="@ActiveCategory"
                        SelectedNoteId="@SelectedNoteId"
                        CampaignId="@int.Parse(Id)"
                        OnClose="HideAddNotesAsync" />
                    }

                </div>
            }
        </div>
        <div class="row my-4 pt-4 border-top">
            <div>
                <a class="btn btn-secondary me-2" onclick="history.back();">Zurück</a>
                @if (isDungeonMaster)
                {
                    <button class="btn btn-danger" @onclick="DeleteCampaign">Löschen</button>
                }
            </div>
        </div>
        @if (!string.IsNullOrEmpty(UIMessage)) {
            <div class="row my-4 pt-4">
                <div class="@uiMessageClass">
                    @UIMessage
                </div>
            </div>
        }
    }

</CascadingValue>

@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    [Parameter]
    public required string Id { get; set; }
    public Campaign Campaign { get; set; } = new Campaign();
    public List<(User User, Character Character)> PlayerCharacters = new List<(User User, Character Character)>();
    private Character playerCharacter = new Character();
    private Character? selectedCharacter;
    private List<Character>? joindCharacters = new List<Character>();
    private IEnumerable<JoinRequest>? joinRequests;
    private string requestMessage = "";
    private string UIMessage = "";
    private string uiMessageClass = "";
    private bool isUserDM;

    public new string ActiveCategory = "story";

    private IEnumerable<Appointment>? nextAppointments;
    private bool hasAppointmentsToVote;

    private string currentUserId = "";
    private bool showAddCharacter;

    private bool isDungeonMaster;
    private bool isCharacterOwner;
    private bool hasCharacterAccess;
    private bool getUserPermHasFailed;

    protected override async Task OnInitializedAsync() {
        await appState.EnsureCampaigns();
        currentUserId = appState.UserId;

        if (appState.Campaigns != null && appState.Campaigns.Any())
            Campaign = appState.Campaigns.FirstOrDefault(c => c.Id == int.Parse(Id)) ?? new Campaign();


        if(Campaign != null){
            if (Campaign.DungeonMasters != null && Campaign.DungeonMasters.Any(dm => dm.Id == currentUserId)) {
                isUserDM = true;
            }
            await GetOpenJoinRequests();
            GetNextAppointments();
            await AllocatePlayersNCharacters();
            isDungeonMaster = Campaign.DungeonMasters != null ? Campaign.DungeonMasters.Any(dm => dm.Id == currentUserId) : false;
        }
        else {
            navManager.NavigateTo("/access-denied");
        }
    }

    private async Task GetOpenJoinRequests() {
        joinRequests = await joinRequestManager.GetAll();
        joinRequests = joinRequests.Where(x => x.CampaignId == int.Parse(Id) && x.Accepted == null);
    }
    private async void JoinRequestReject(JoinRequest joinRequest) {
        if (joinRequest != null) {
            await joinRequestManager.Delete(joinRequest.Id);
            UIMessage = $"Beitrittsanfrage abgelehnt";
            await GetOpenJoinRequests();
        }
        StateHasChanged();
    }
    private async Task JoinRequestAccept(JoinRequest joinRequest) {

        if (joinRequest != null) {
            joinRequest.Accepted = DateTime.UtcNow;
            joinRequest.User = null;
            await joinRequestManager.Update(joinRequest);
            UIMessage = $"Beitrittsanfrage akzeptiert";
            await AllocatePlayersNCharacters();
            await GetOpenJoinRequests();
            await appState.GetCampaigns();
            Campaign = appState.Campaigns.FirstOrDefault(c => c.Id == int.Parse(Id));
        }
        StateHasChanged();
    }
    public async Task AllocatePlayersNCharacters()
    {
        try  {
            Campaign = await campaignManager.GetByID(Id);
            PlayerCharacters.Clear();

            Character temp = new();

            if (Campaign.Players != null && Campaign.Players.Any()) {
                foreach (var player in Campaign.Players) {
                    Character character = Campaign.Characters.FirstOrDefault(c => c.UserId == player.Id);
                    PlayerCharacters.Add((player, character));
                    if (character != null) {
                        temp = await characterManager.GetByID(character.Id);
                        joindCharacters.Add(temp);
                    }
                }
            }
        }
        catch (Exception ex) {
            UIMessage = "Fehler beim Laden der Mitspieler. Informationen sind möglicherweise nicht vollständig. Gehe Online, um alle Informationen anzuzeigen.";
            uiMessageClass = "text-danger";
            Console.WriteLine(ex.Message);
        }
    }
    private async Task ShareAccessCode() {
        try {
            if (await js.InvokeAsync<bool>("navigator.canShare", new { text = "Test" })) {
                await js.InvokeVoidAsync("navigator.share", new {
                    title = "Dungeon Kampagne",
                    text = $"Trete meiner Kampagne unter sadnd.benpeter.ch/join-campaign bei. Der Zugangscode lautet: {Campaign.JoinCode}"
                });
            }
            else {
                UIMessage = "Web Share API wird nicht unterstützt";
                uiMessageClass = "text-danger";
            }

        }
        catch (Exception ex) {
            UIMessage = "Fehler beim Teilen";
            uiMessageClass = "text-danger";
            Console.WriteLine($"Fehler beim Teilen: {ex.Message}");
        }
    }
    private void ShowAddCharacter(Character? characterToChange) {
        selectedCharacter = characterToChange;
        showAddCharacter = true;
    }
    private void HideAddCharacter() {
        showAddCharacter = false;
        StateHasChanged();
    }
    private async Task ShowCharacterDetails(Character character) {
        await GetUserPerm(character);

        if (isCharacterOwner || hasCharacterAccess) {
            if (character != null) {
                navManager.NavigateTo($"character-details/{character.Id}");
            }
        }
        else {
            if (!getUserPermHasFailed) {
                UIMessage = $"Kein Zugriff auf Character {character.Name}";
                uiMessageClass = "text-danger";
            }

        }
    }

    private async Task RemovePlayer(User playerToDelete, bool isKicked) {

        try {
            string toDeleteName = playerToDelete.UserName;
            string confirmMessage = $"Soll der Spieler '{toDeleteName}' wirklich entfernt werden?";
            string uiMessage = $"Spieler '{toDeleteName}' wurde entfernt";
            uiMessageClass = "text-success";

            if (!isKicked) {
                confirmMessage = $"Möchtest du diese Kampagne wirklich verlassen?";
                uiMessage = $"Kampagne erfolgreich verlassen";
            }


            bool confirm = await js.InvokeAsync<bool>("confirm", $"{confirmMessage}");
            if (!confirm) return;

            if (Campaign.Players != null) {
                Campaign.Players.Remove(playerToDelete);
                Campaign = await campaignManager.Update(Campaign);
                appState.Campaigns[appState.Campaigns.FindIndex(c => c.Id == int.Parse(Id))] = Campaign;
                UIMessage = uiMessage;
                if (!isKicked)
                {
                    appState.Campaigns.Remove(Campaign);
                    await js.InvokeVoidAsync("history.back");
                }
                else {
                    await AllocatePlayersNCharacters();
                    StateHasChanged();
                }

            }
            else {
                UIMessage = $"Spieler '{toDeleteName}' nicht gefunden";
                uiMessageClass = "text-danger";
            }
        }
        catch (Exception ex) {
            UIMessage = "Fehler beim Entfernen von Spieler";
            uiMessageClass = "text-danger";
            Console.WriteLine($"Exception RemovePlayer: {ex.Message}");
        }

    }

    private async Task GetUserPerm(Character character) {
        try {
            isCharacterOwner = false;
            hasCharacterAccess = false;

            Character temp = await characterManager.GetByID(character.Id);

            if (temp.UserId == currentUserId) {
                isCharacterOwner = true;
                return;
            }
            if (temp.UserAccess != null && temp.UserAccess.Any(x => x.Id == currentUserId)) {
                hasCharacterAccess = true;
                return;
            }
        }
        catch (Exception) {
            UIMessage = "Funktion nur online verfügbar";
            uiMessageClass = "text-danger";
            getUserPermHasFailed = true;
        }
        
    }

    private void GetNextAppointments(){
        DateOnly today = DateOnly.FromDateTime(DateTime.Today);

        if (Campaign.Appointments != null && Campaign.Appointments.Any(x => x.Accepted)) {
            nextAppointments = Campaign.Appointments
                .Where(x => x.Accepted && x.Date >= today) 
                .OrderBy(x => x.Date);
        }
        if (Campaign.Appointments != null && Campaign.Appointments.Any(x => !x.Accepted && x.Date >= today)) {
            hasAppointmentsToVote = true;
        }
        
    }

    private async Task DeleteCampaign() {
        string toDeleteName = Campaign.Name;
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        if (!confirm) return;

        bool success = await campaignManager.Delete(Campaign.Id);

        if (success) {
            appState.Campaigns.Remove(appState.Campaigns[appState.Campaigns.FindIndex(c => c.Id == Campaign.Id)]);
            UIMessage = $"Kampagne '{toDeleteName}' erfolgreich gelöscht.";
            uiMessageClass = "text-success";
            await js.InvokeVoidAsync("history.back");
        }
        else {
            UIMessage = $"Kampagne '{toDeleteName}' konnte nicht gelöscht werden.";
            uiMessageClass = "text-danger";
        }
    }
}
