@page "/character-details/{id}"
@attribute [Authorize]
@inject CharacterManager characterManager
@inject IJSRuntime js

@if(character != null) {
    <h3>Charakter "@character.Name" - Details</h3>

    <div class="container-fluid mt-3">
        <div class="row">
            <p>
                Rasse: @* @character.Race!.Name *@
            </p>
            @* <p>Klassen: 
                @foreach(var charClass in character.Classes) {
                    charClass.Class.Name;
                }
            </p> *@
            @if (character.Age != null) {
                <p>
                    Alter: @character.Age
                </p>
            }
            @if (character.SizeCategory != null) {
                <p>
                    Grösse-Kategorie: @character.SizeCategory
                </p>
            }
            @if (character.Size != null) {
                <p>
                    Grösse: @character.Size
                </p>
            }
            @if (character.Weight != null) {
                <p>
                    Gewicht: @character.Weight
                </p>
            }
            @if (character.Sex != null) {
                <p>
                    Geschlecht: @character.Sex
                </p>
            }
            @if (character.Alignment != null) {
                <p>
                    Gesinnung: @character.Alignment
                </p>
            }
        </div>
    </div>
    <div>
        <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
        <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button>
    </div>
}


@code {
    [Parameter] public required string Id { get; set; }
    private Character character = new Character();

    protected override async Task OnInitializedAsync() {
        character = await characterManager.GetByID(Id);
    }


    private async Task DeleteCharacter() {
        // string toDeleteName = character.Name;
        // bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        // if (!confirm) return;

        await js.InvokeVoidAsync("alert", "Funktion wird später implementiert");
        //await characterManager.Delete(character.Id);
    }

}
