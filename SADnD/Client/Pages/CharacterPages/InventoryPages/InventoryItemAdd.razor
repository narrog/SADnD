@inject SyncRepository<InventoryItem> inventoryItemManager
@inject SyncRepository<Character> characterManager

<EditForm Model="@item" OnValidSubmit="@Post" class="w-100">
    <DataAnnotationsValidator />
    <label for="count">Anzahl: </label>
    <InputNumber @bind-Value="@count" id="count" class="form-control"></InputNumber>
    <label for="name">Name:</label> 
    <InputText @bind-Value="@item.Name" @oninput="UpdateSearchText" disabled="@isItemSelected" id="name" class="form-control"></InputText>

    <p>
        @if (FilteredItems != null && FilteredItems.Any()) {
            <ul class="list-group mt-2">
                @foreach (var filteredItem in FilteredItems) {
                    <li class="list-group-item @(item == filteredItem ? "bg-secondary text-white" : "")" @onclick="() => SelectItem(filteredItem)">
                        @filteredItem.Name 
                        @if(filteredItem.Weight != null) {
                            <span> - @filteredItem.Weight @UnitOfWeight</span>
                        }
                    </li>
                }
            </ul>
        }
        else if (!string.IsNullOrWhiteSpace(item.Name)) {
            <div class="mt-2">
                <p class="text-warning">Neues Item "@item.Name" wird erstellt</p>
            </div>
        }
    </p>
    <label for="weight">Gewicht: (@UnitOfWeight)</label>
    <InputNumber @bind-Value="@item.Weight" disabled="@isItemSelected" id="weight" class="form-control"></InputNumber>
    
    <div class="mt-3">
        <SubmitButton />
        <a class="btn btn-outline-primary me-2" href="all-items">Gegenstände bearbeiten</a>
        <button class="btn btn-outline-secondary me-2" type="button" @onclick="Close">Abbrechen</button>
    </div>
    

    <ValidationSummary class="mt-3" />
    @if (showUIMessage) {
        <ul class="mt-3">
            <li class="validation-message">
                @UIMessage
            </li>
        </ul>
    }
</EditForm> 



@code {
    [CascadingParameter] 
    public CascadingAppState appState { get; set; }
    [CascadingParameter]
    protected CharacterDetails Context { get; set; }
    [Parameter]
    public int CharacterId { get; set; }
    [Parameter] 
    public bool ShowAddItems { get; set; }
    [Parameter] 
    public EventCallback OnClose { get; set; }
    [Parameter] 
    public required string UnitOfWeight { get; set; }

    private InventoryItem item = new InventoryItem();
    private InventoryItem savedItem = new InventoryItem();
    private bool isItemSelected = false;
    private bool showUIMessage = false;
    private string UIMessage = "";

    private string SearchText {
        get => item.Name;
        set {
            item.Name = value;
            FilterItems();
        }
    }

    private IEnumerable<InventoryItem> allItems;
    private IEnumerable<InventoryItem> FilteredItems { get; set; } = new List<InventoryItem>();

    private int count = 1;

    protected override async Task OnInitializedAsync() {
        item.UserId = appState.UserId;
        allItems = await inventoryItemManager.GetAll();
        allItems = allItems.OrderBy(item => item.Name);
    }

    private async void Post() {
        try {
            if(count < 1) {
                UIMessage = "Anzahl muss mindestens 1 betragen";
                showUIMessage = true;
                return;
            }
            bool itemExists = false;
            if (Context.Character.Inventory != null)
            {
                if (Context.Character.Inventory.Count > 0)
                {
                    itemExists = Context.Character.Inventory.Any(i => i.Item!.Id == item.Id);
                }
            }
            if (itemExists) {
                UIMessage = "Item bereits im Inventar vorhanden";
                showUIMessage = true;
                return;
            }
            else {
                Context.Character.Inventory.Add(new Inventory() { CharacterId = Context.Character.Id, Item = item, Count = count});
                Context.Character = await characterManager.Update(Context.Character);
                appState.Characters[appState.Characters.FindIndex(c => c.Id == Context.Character.Id)] = Context.Character;
                await OnClose.InvokeAsync();
            }
            StateHasChanged();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
            StateHasChanged();
        }
    }

    private void UpdateSearchText(ChangeEventArgs e) {
        SearchText = e.Value?.ToString() ?? string.Empty;
        FilterItems();
    }
    private void FilterItems() {
        var search = item.Name.ToLower();
        FilteredItems = allItems
            .Where(item => item.Name.ToLower().Contains(search))
            .ToList();
    }
    private void SelectItem(InventoryItem selected) {
        isItemSelected = true;
        item = selected;
        FilteredItems = new List<InventoryItem> { selected };
    }

    private async void Close(){
        await OnClose.InvokeAsync();
    }
}
