@using Newtonsoft.Json
@inject InventoryItemManager inventoryItemManager
@inject CharacterManager characterManager
@inject IJSRuntime js

<EditForm Model="@item" OnValidSubmit="@Post">
    <DataAnnotationsValidator />
    <p>Anzahl: <InputNumber @bind-Value="@count"></InputNumber></p>
    <p>Name: <InputText @bind-Value="@item.Name"></InputText></p>
    <p>Gewicht: <InputNumber @bind-Value="@item.Weight"></InputNumber></p>
    <SubmitButton />
    <button class="btn btn-secondary" type="button" @onclick="Close">Abbrechen</button>

    <ValidationSummary class="mt-3" />
</EditForm> 


@code {
    [CascadingParameter] 
    public CascadingAppState appState { get; set; }

    [Parameter] public bool ShowAddItems { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public required Character Character { get; set; }

    private InventoryItem item = new InventoryItem();
    private InventoryItem savedItem = new InventoryItem();

    private IEnumerable<InventoryItem> allItems;
    private string message = "";
    private int count = 1;

    protected override async Task OnInitializedAsync() {
        item.UserId = appState.UserId;

        //allItems = await inventoryItemManager.GetAllItems();
    }

    private async void Post() {
        try {
            //savedItem = await inventoryItemManager.Insert(item);
            //message = JsonConvert.SerializeObject(savedItem);
            //Console.WriteLine($"message item: {message}");
            Character.Inventory.Add(new Inventory() { CharacterId = Character.Id, Item = item, Count = count });
            Character = await characterManager.Update(Character);
            message = JsonConvert.SerializeObject(Character);
            Console.WriteLine($"message character: {message}");
            await OnClose.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
            StateHasChanged();
        }
    }


    private async void Close(){

        await OnClose.InvokeAsync();
    }
}
