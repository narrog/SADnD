@inject SyncRepository<Character> characterManager

<table class="table table-striped">
    <tbody>
        @if (context.Character.Inventory != null && context.Character.Inventory.Any() != false)
        {
            @foreach (var inventoryItem in context.Character.Inventory)
            {
                <tr>
                    <td width="8%" class="align-middle">
                        @inventoryItem.Count
                    </td>
                    <td width="12%" class="align-middle">
                        @if(context.Character.UserId == appState.UserId) {
                            <a @onclick="() => IncreaseItemCount(inventoryItem)" title="Anzahl erhöhen" class="text-success pointer"><i class="bi bi-plus-square-fill"></i></a>
                            <a @onclick="() => DecreaseItemCount(inventoryItem)" title="Anzahl verringern" class="text-danger pointer"><i class="bi bi-dash-square-fill"></i></a>
                        }
                    </td>
                    @if (inventoryItem.Item != null) {
                        <td width="50%" class="align-middle">@inventoryItem.Item.Name</td>
                        @if (inventoryItem.Item.Weight != null) {
                            <td width="15%" class="align-middle text-end">
                                @inventoryItem.Item.Weight @UnitOfWeight
                            </td>
                            <td width="15%" class="align-middle text-end">
                                @((inventoryItem.Count * Convert.ToDecimal(inventoryItem.Item.Weight)).ToString("G29")) @UnitOfWeight
                            </td>
                        }
                        else {
                            <td width="15%"></td>
                            <td width="15%"></td>
                        }
                    }
                </tr>
            }
            <tr>
                <td class="align-middle text-end" colspan="4">Gewicht Total</td>
                <td class="align-middle text-end">@weightTotal.ToString("G29") @UnitOfWeight</td>
            </tr>
        }
        else {
            <tr><td>Keine Items gefunden</td></tr>
        }
    </tbody>
</table>
@if (showUIMessage) {
    <ul class="mt-3">
        <li class="validation-message">
            @UIMessage
        </li>
    </ul>
}

@code {
    [CascadingParameter]
    CascadingAppState appState { get; set; }
    [CascadingParameter]
    private CharacterDetails context { get; set; }
    [Parameter]
    public required int CharacterId { get; set; }
    [Parameter]
    public string? UnitOfWeight { get; set; }

    private bool showUIMessage;
    private string UIMessage = string.Empty;

    private decimal weightTotal;

    protected override async Task OnInitializedAsync() {
        await Task.Delay(1500);
        GetWeightSum();
    }

    private void GetWeightSum() {        
        weightTotal = 0;
        decimal weightProduct;
        if (context.Character.Inventory != null && context.Character.Inventory.Any())
        {
            foreach (var inventoryItem in context.Character.Inventory) {
                @if (inventoryItem.Item != null) {
                    @if (inventoryItem.Item.Weight != null) {
                        weightProduct = Convert.ToDecimal(inventoryItem.Item.Weight.Value) * inventoryItem.Count;
                        weightTotal += weightProduct;
                    }
                }
            }
        }
    }

    private async Task IncreaseItemCount(Inventory inventoryItem) {
        showUIMessage = false;
        inventoryItem.Count++;
        await UpdateItemCount();
    }
    private async Task DecreaseItemCount(Inventory inventoryItem) {
        showUIMessage = false;
        if (inventoryItem.Count == 1) {

            await DeleteItemFromInventory(inventoryItem);
            return;
        }

        inventoryItem.Count--;
        await UpdateItemCount();
    }
    private async Task UpdateItemCount() {
        context.Character = await characterManager.Update(context.Character);
        appState.Characters[appState.Characters.FindIndex(c => c.Id == context.Character.Id)] = context.Character;
        GetWeightSum();
        StateHasChanged();
    }

    private async Task DeleteItemFromInventory(Inventory inventoryItem) {
        try {
            if (context.Character.Inventory != null && context.Character.Inventory.Any())
            {
                var itemToRemove = context.Character.Inventory.FirstOrDefault(i => i.Item.Id == inventoryItem.Item.Id);

                if (itemToRemove != null) {

                    string itemName = itemToRemove.Item!.Name;
                    context.Character.Inventory!.Remove(itemToRemove);
                    UIMessage = $"Item '{itemName}' wurde aus dem Inventar entfernt";
                    showUIMessage = true;
                }
            }
            context.Character = await characterManager.Update(context.Character);
            appState.Characters[appState.Characters.FindIndex(c => c.Id == context.Character.Id)] = context.Character;
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }

    }
}
