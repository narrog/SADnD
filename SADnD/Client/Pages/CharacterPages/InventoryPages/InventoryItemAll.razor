@page "/all-items"

@attribute [Authorize]
@inject SyncRepository<InventoryItem> inventoryItemManager
@inject IJSRuntime js

<h3>Deine Items</h3>
<div class="container-fluid">
    <div class="row">
        
        @if (!showEditForm) {
            <div class="col-12 col-md-8">
                <table class="table table-hover table-striped">
                    <tbody>
                        @if (allItems != null && allItems.Any()) {
                            @foreach (var item in allItems) {
                                <tr>
                                    <td>@item.Name</td>
                                    @if (item.Weight != null) {
                                        <td>@item.Weight @unitOfWeight</td>
                                    }
                                    else {
                                        <td></td>
                                    }
                                    <td>
                                        <button class="btn btn-outline-secondary" @onclick="() => EditItem(item)">Bearbeiten</button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item)">Löschen</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-12 col-md-4">
                <button class="btn btn-secondary" @onclick="AddItem">Neues Item</button>
            </div>
         }
         @if (showEditForm) {
            <div class="col-12 col-md-4">
                <EditForm Model="@item" OnValidSubmit="@Post" class="w-100">
                    <DataAnnotationsValidator />
                    <label for="name">Name:</label>
                    <InputText @bind-Value="@item.Name" id="name" class="form-control"></InputText>
                    <label for="weight">Gewicht: (@unitOfWeight):</label>
                    <InputNumber @bind-Value="@item.Weight" id="weight" class="form-control"></InputNumber>
                    <div class="mt-3">
                        <SubmitButton />
                        <button class="btn btn-secondary" type="button" @onclick="Close">Abbrechen</button>
                    </div>
                    <ValidationSummary class="mt-3" />
                </EditForm>
            </div>
        }
    </div>
    @if(!string.IsNullOrEmpty(UIMessage)){
        <div class="row mt-3">
            @UIMessage
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    private IEnumerable<InventoryItem> allItems;
    private InventoryItem item = new InventoryItem();
    private string unitOfWeight = "kg";
    private bool showEditForm;
    private string UIMessage = "";

    protected override async Task OnInitializedAsync() {
        await GetAllItems();
    }
    private async Task GetAllItems() {
        allItems = await inventoryItemManager.GetAll();
        allItems = allItems.OrderBy(item => item.Name);
    }
    private async Task DeleteItem(InventoryItem itemToDelete) {
        string name = itemToDelete.Name;
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{name}' wirklich gelöscht werden?\r\nDas Item wird bei allen Charakteren entfernt.\r\nDas Löschen kann nicht Rückgängig gemacht werden");
        if (confirm) {
            await inventoryItemManager.Delete(itemToDelete.Id);
            UIMessage = $"Item '{name}' erfolgreich gelöscht";
            await GetAllItems();
            StateHasChanged();
        }
        return;
    }
    private void EditItem(InventoryItem itemToEdit) {
        UIMessage = "";
        item = itemToEdit;
        showEditForm = true;
    }
    private void AddItem() {
        UIMessage = "";
        item = new InventoryItem();
        showEditForm = true;
    }

    private async void Post() {
        try {
            if(item.Id != 0) {
                await inventoryItemManager.Update(item);
                UIMessage = $"Item '{item.Name}' erfolgreich bearbeitet";                
            }
            else {
                item.UserId = appState.UserId;
                await inventoryItemManager.Insert(item);
                UIMessage = $"Item '{item.Name}' erfolgreich erstellt";
            }
            await Close();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
            StateHasChanged();
        }
    }
    private async Task Close() {
        showEditForm = false;
        await GetAllItems();
        StateHasChanged();
    }
}
