@inject CharacterApiManager characterManager
@inject CampaignApiManager campaignManager

<h3>Charakter zuweisen</h3>

<EditForm Model="@selectedCampaign" OnValidSubmit="Post" class="w-100">
    <label for="campaign">Name:</label>
    @if (campaignsFromUser != null) {
        <InputSelect @bind-Value="selectedCampaignId" class="form-select" id="campaign">
            <option selected value="">Bitte auswählen</option>
            @foreach (var userCampaign in campaignsFromUser) {
                <option value="@userCampaign.Id">@userCampaign.Name</option>
            }
        </InputSelect>
    }

    <br /><br />
    <SubmitButton />
    <button class="btn btn-outline-secondary me-2" type="button" @onclick="Close">Abbrechen</button>

    <ValidationSummary class="mt-3" />
</EditForm>


@code {
    [CascadingParameter] 
    public CascadingAppState appState { get; set; }
    [Parameter]
    public required string CharacterId { get; set; }
    // [Parameter]
    // public required Campaign Campaign { get; set; }
    // [Parameter]
    // public Character? OriginalCharacter { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }

    // private IEnumerable<Character>? charactersFromUser;
    private Character selectedCharacter = new();

    private IEnumerable<Campaign>? campaignsFromUser;
    private Campaign selectedCampaign = new();
    private string selectedCampaignId = "";

    // private int selectedCharacterId;
    // public int SelectedCharacterId {
    //     get => selectedCharacterId;
    //     set {
    //         selectedCharacterId = value;

    //         selectedCharacter = charactersFromUser?.FirstOrDefault(c => c.Id == selectedCharacterId) ?? new Character();
    //     }
    // }

    protected override async Task OnInitializedAsync() {
        Console.WriteLine($"CharacterId: {CharacterId}");
        if (!string.IsNullOrEmpty(CharacterId)) {
            selectedCharacter = await characterManager.GetByID(CharacterId);
        }
        Console.WriteLine($"selectedCharacter.Id: {selectedCharacter.Id}");
        await GetCampaignsFromUser();
    }
    private async Task GetCampaignsFromUser() {
        campaignsFromUser = await campaignManager.GetAll();
        campaignsFromUser = campaignsFromUser.Where(c => c.Players != null && c.Players.Any(player => player.Id == appState.UserId));
    }

    private async void Post() {

        try {
            // if (OriginalCharacter != null) {
            //     Character characterToRemove = await characterManager.GetByID(OriginalCharacter.Id);
            //     characterToRemove.CampaignId = null;
            //     await characterManager.Update(characterToRemove);
            // }
            selectedCharacter.CampaignId = selectedCampaignId;
                        
            await characterManager.Update(selectedCharacter);
            Close();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }
    }

    private async void Close() {
        await OnClose.InvokeAsync();
    }
}
