@inject CharacterApiManager characterManager
@inject CampaignApiManager campaignManager
@inject IJSRuntime js
@using Newtonsoft.Json

<h4>Kampagne zuweisen</h4>

<EditForm Model="@selectedCampaign" OnValidSubmit="Post" class="w-100">
    <label for="campaign">Name:</label>
    @if (campaignsFromUser != null) {
        <InputSelect @bind-Value="selectedCampaignId" class="form-select" id="campaign">
            <option selected value="">Bitte auswählen</option>
            @foreach (var userCampaign in campaignsFromUser) {
                <option value="@userCampaign.Id">@userCampaign.Name</option>
            }
        </InputSelect>
    }
    <div class="mt-3">
        <SubmitButton />
        <button class="btn btn-outline-secondary me-2" type="button" @onclick="Close">Abbrechen</button>
    </div>
    

    <ValidationSummary class="mt-3" />
    @if (!string.IsNullOrEmpty(UIMessage)) {
        <ul class="mt-3">
            <li class="validation-message">
                @UIMessage
            </li>
        </ul>
    }
</EditForm>


@code {
    [CascadingParameter] 
    private CascadingAppState appState { get; set; }
    [Parameter]
    public required string CharacterId { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }

    private IEnumerable<Character>? charactersFromCampaign;
    private Character characterToAdd = new();
    private Character? existingCharacter;
    private bool hasOtherCharacter;

    private IEnumerable<Campaign>? campaignsFromUser;
    private Campaign selectedCampaign = new();
    private string selectedCampaignId = "";

    private string UIMessage = "";

    protected override async Task OnInitializedAsync() {
        await appState.EnsureCharacters();
        if (!string.IsNullOrEmpty(CharacterId)) {
            characterToAdd = appState.Characters.FirstOrDefault(c => c.Id == Int32.Parse(CharacterId));
        }
        await GetCampaignsFromUser();
    }
    private async Task GetCampaignsFromUser() {
        campaignsFromUser = appState.Campaigns
            .Where(c => c.Players?.Any(player => player.Id == appState.UserId) == true);
    }

    private async void Post() {
        try {
            if (string.IsNullOrEmpty(selectedCampaignId)) {
                UIMessage = "Kampagne muss ausgewählt werden";
                StateHasChanged();
                return;
            }
            await CheckForExistingCharacter();
            if (hasOtherCharacter && existingCharacter != null) {
                bool confirm = await js.InvokeAsync<bool>("confirm", "Bei dieser Kampagne ist bereits ein Charakter zugewiesen.\r\nSoll der bestehende Charakter überschrieben werden?");

                if (!confirm) return;

                Character characterToRemove = appState.Characters.FirstOrDefault(c => c.Id == existingCharacter.Id);
                characterToRemove.CampaignId = null;
                characterToRemove = await characterManager.Update(characterToRemove);
                appState.Characters[appState.Characters.FindIndex(c => c.Id == characterToRemove.Id)] = characterToRemove;
            }
            characterToAdd.CampaignId = selectedCampaignId;

            characterToAdd = await characterManager.Update(characterToAdd);
            appState.Characters[appState.Characters.FindIndex(c => c.Id == characterToAdd.Id)] = characterToAdd;
            await appState.GetCampaigns();
            Close();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }
    }

    private async Task CheckForExistingCharacter() {
        selectedCampaign = appState.Campaigns.FirstOrDefault(c => c.Id == selectedCampaignId);
        charactersFromCampaign = selectedCampaign.Characters;
        if (charactersFromCampaign != null) {
            if (charactersFromCampaign.Any(x => x.UserId == appState.UserId)) {
                hasOtherCharacter = true;
                existingCharacter = charactersFromCampaign.FirstOrDefault(x => x.UserId == appState.UserId);
            }
        }
    }

    private async void Close() {
        await OnClose.InvokeAsync();
    }

}
