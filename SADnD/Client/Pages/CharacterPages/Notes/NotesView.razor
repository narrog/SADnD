@inject NoteManager noteManager
@inject CharacterSyncManager characterManager

<div class="col-12 col-md-5 mt-3 mt-md-0">
    @* TODO: Titel entfernen, sollte durch einfärbung der Punkte ersichtlich sein *@
    <h4>@NotesCategory</h4>
    @if (filteredNotes != null && filteredNotes.Any() != false) {
        @foreach (var note in filteredNotes) {
            <div class="border border-1 my-2 p-2">
                <h5>@note.Name</h5>
                <p>@note.Content</p>
                @if (note is NotePerson notePerson) {
                    <p><strong>Ort: </strong>@notePerson.Location</p>
                    <p><strong>Zugehörigkeit: </strong>@notePerson.Affiliation</p>
                }
            </div>
        }
    }
    else {
        <div class="border border-1 my-2 p-2">
            <p>Keine Notizen gefunden</p>
        </div>
    }

    @if (showUIMessage) {
        <ul class="mt-3">
            <li class="validation-message">
                @UIMessage
            </li>
        </ul>
    }
</div>
<div class="col-12 col-md-5 mt-3 mt-md-0">
    @if (!showAddNotes) {
        <button class="btn btn-secondary" @onclick="ShowAddNotes">Notiz hinzufügen</button>
    }
    else {
        <NotesAdd NotesCategory="@NotesCategory"
                  CharacterId="@CharacterId"
                  OnClose="HideAddNotes" />
    }
</div>

@code {
    [Parameter]
    public required string NotesCategory { get; set; }
    [Parameter]
    public required int CharacterId { get; set; }

    private IEnumerable<Note>? allNotes;
    private IEnumerable<Note>? filteredNotes;

    private bool showAddNotes;
    private bool showUIMessage;
    private string UIMessage = string.Empty;

    protected override async Task OnInitializedAsync() {
        await GetNotesAndApplyFilter();
    }
    protected override async Task OnParametersSetAsync() {
        await GetNotesAndApplyFilter();
    }

    private async Task GetNotesAndApplyFilter(){
        allNotes = await noteManager.GetAll();

        if (allNotes == null) return;

        filteredNotes = NotesCategory switch
        {
            "story" => allNotes.Where(note => note is NoteStory),
            "people" => allNotes.Where(note => note is NotePerson),
            "locations" => allNotes.Where(note => note is NoteLocation),
            "quest" => allNotes.Where(note => note is NoteQuest),
            "hints" => allNotes.Where(note => note is NoteHint),
            _ => allNotes
        };
        filteredNotes = filteredNotes.Where(c => c.CharacterId == CharacterId);
    }
    private async void ShowAddNotes() {
        UIMessage = "";
        showAddNotes = true;
        await OnParametersSetAsync();
        StateHasChanged();
    }
    private async void HideAddNotes() {
        await OnParametersSetAsync();
        showAddNotes = false;
        StateHasChanged();
    }
    public void ResetAddNotes() {
        showAddNotes = false;
        StateHasChanged();
    }
}
