@inject NoteManager noteManager
@inject CharacterSyncManager characterManager

<div class="col-12 col-md-5 mt-3 mt-md-0">
    <h4>@NotesCategory - Notizen</h4>
    <div class="border border-1 my-2 p-2">
        @if (allNotes != null && allNotes.Any() != false) {
            @foreach (var note in allNotes) {
                <h5>@note.Name</h5>
                <p>@note.Content</p>
            }
        }
        else {
            <p>Keine Notizen gefunden</p>
        }
    </div>
            

    @if (showUIMessage) {
        <ul class="mt-3">
            <li class="validation-message">
                @UIMessage
            </li>
        </ul>
    }
</div>
<div class="col-12 col-md-5 mt-3 mt-md-0">
    @if (!showAddNotes) {
        <button class="btn btn-secondary" @onclick="ShowAddNotes">Notiz hinzufügen</button>
    }
    else {
        <NotesAdd NotesCategory="@NotesCategory"
                  CharacterId="@CharacterId"
                  OnClose="HideAddItems" />
    }
</div>

@code {
    [Parameter]
    public required string NotesCategory { get; set; }
    [Parameter]
    public required int CharacterId { get; set; }

    private IEnumerable<Note>? allNotes;

    private bool showAddNotes;
    private bool showUIMessage;
    private string UIMessage = string.Empty;

    protected override async Task OnInitializedAsync() {
        allNotes = await noteManager.GetAll();
    }
    private void ShowAddNotes() {
        UIMessage = "";
        showAddNotes = true;
        //Character = await characterManager.GetByID(Character.Id);
        StateHasChanged();
    }
    private async void HideAddItems() {
        allNotes = await noteManager.GetAll();
        showAddNotes = false;
        StateHasChanged();
    }
}
