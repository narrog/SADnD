@page "/character-details/{id}"
@attribute [Authorize]
@inject CharacterManager characterManager
@inject IJSRuntime js

@if (character != null) {
    <h3>Charakter "@character.Name" - Details</h3>

    <div class="container-fluid mt-3">
        <div class="row">
            <p><strong>Rasse: </strong>@(character.Race != null ? character.Race.Name : "Unbekannt")</p>
            @if (character.Classes != null && character.Classes.Any()) {
                <p>
                    <strong>Klassen</strong>
                    <ul>
                        @foreach (var characterClass in character.Classes) {
                            @if (characterClass.Class != null) {
                                <li>
                                    @characterClass.Class.Name, Level: @characterClass.Level
                                </li>
                            }
                        }
                    </ul>
                </p>
            }
            else {
                <p>Keine Klasse zugeordnet</p>
            }
            <p><strong>Alter: </strong>@(character.Age != null ? character.Age : "Unbekannt")</p>
            <p><strong>Grösse-Kategorie: </strong>@(character.SizeCategory != null ? character.SizeCategory : "Unbekannt")</p>
            <p><strong>Grösse: </strong>@(character.Size != null ? character.Size : "Unbekannt")</p>
            <p><strong>Gewicht: </strong>@(character.Weight != null ? character.Weight : "Unbekannt")</p>
            <p><strong>Geschlecht: </strong>@(character.Sex != null ? character.Sex : "Unbekannt")</p>
            <p><strong>Gesinnung: </strong>@(character.Alignment != null ? character.Alignment : "Unbekannt")</p>

        </div>
    </div>
    <div>
        <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
        <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button>
    </div>
}



@code {
    [Parameter] public required string Id { get; set; }
    private Character character = new Character();

    protected override async Task OnInitializedAsync() {
        character = await characterManager.GetByID(Id);
    }


    private async Task DeleteCharacter() {
        // string toDeleteName = character.Name;
        // bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        // if (!confirm) return;

        await js.InvokeVoidAsync("alert", "Funktion wird später implementiert");
        //await characterManager.Delete(character.Id);
    }

}
