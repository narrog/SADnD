@page "/character-details/{id}"
@using SADnD.Client.Pages.CharacterPages.InventoryPages
@using Newtonsoft.Json
@attribute [Authorize]
@inject CharacterSyncManager characterManager
@inject IJSRuntime js

<CascadingValue Value="@this" IsFixed="true">
    @if (Character != null) {
        <h3>Charakter "@Character.Name"</h3>

        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-12 col-md-4">
                    <h4>Details</h4>
                    <p><strong>Rasse: </strong>@(Character.Race != null ? Character.Race.Name : "Unbekannt")</p>
                    @if (Character.Classes != null && Character.Classes.Any()) {
                        <p>
                            <strong>Klassen</strong>
                            <ul>
                                @foreach (var characterClass in Character.Classes) {
                                    @if (characterClass.Class != null) {
                                        <li>
                                            @characterClass.Class.Name, Level: @characterClass.Level
                                        </li>
                                    }
                                }
                            </ul>
                        </p>
                    }
                    else {
                        <p>Keine Klasse zugeordnet</p>
                    }
                    <p><strong>Grösse-Kategorie: </strong>@(Character.SizeCategory != null ? Character.SizeCategory : "Unbekannt")</p>
                    <p><strong>Grösse: </strong>@(Character.Size != null ? Character.Size : "Unbekannt")</p>
                    <p><strong>Geschlecht: </strong>@(Character.Sex != null ? Character.Sex : "Unbekannt")</p>
                    <p><strong>Gesinnung: </strong>@(Character.Alignment != null ? Character.Alignment : "Unbekannt")</p>
                    <p><strong>Alter: </strong>@(Character.Age != null ? Character.Age : "Unbekannt")</p>
                    <p><strong>Gewicht: </strong>@(Character.Weight != null ? Character.Weight : "Unbekannt")</p>
                </div>
                <div class="col-12 col-md-4">
                    <h4>Inventar</h4>
                    <table class="table table-striped">
                        <tbody>
                            @if (Character.Inventory != null && Character.Inventory.Any() != false) {
                                @foreach (var inventoryItem in Character.Inventory) {
                                    <tr>
                                        <td width="8%" class="align-middle">
                                            @inventoryItem.Count
                                        </td>
                                        <td width="12%" class="align-middle">
                                            <button @onclick="() => IncreaseItemCount(inventoryItem)" title="Anzahl erhöhen">+</button>
                                            <button @onclick="() => DecreaseItemCount(inventoryItem)" title="Anzahl verringern">-</button>
                                        </td>
                                        @if (inventoryItem.Item != null) {
                                            <td width="50%" class="align-middle">@inventoryItem.Item.Name</td>
                                            @if (inventoryItem.Item.Weight != null) {
                                                <td width="15%" class="align-middle text-end">
                                                    @inventoryItem.Item.Weight @unitOfWeight
                                                </td>
                                                <td width="15%" class="align-middle text-end">
                                                    @(inventoryItem.Count * inventoryItem.Item.Weight) @unitOfWeight
                                                </td>
                                            }
                                            else {
                                                <td width="15%"></td>
                                                <td width="15%"></td>
                                            }
                                        }
                                    </tr>
                                }
                                <tr>
                                    <td class="align-middle text-end" colspan="4">Gewicht Total</td>
                                    <td class="align-middle text-end">@weightTotal @unitOfWeight</td>
                                </tr>
                            }
                            else {
                                <tr><td>Keine Items gefunden</td></tr>
                            }
                        </tbody>
                    </table>
                    @if (showUIMessage) {
                        <ul class="mt-3">
                            <li class="validation-message">
                                @UIMessage
                            </li>
                        </ul>
                    }
                </div>
                <div class="col-12 col-md-4">
                    @if (!showAddItems) {
                        <button class="btn btn-secondary" @onclick="ShowAddItems">Item hinzufügen</button>
                    }
                    else {
                        <InventoryItemAdd ShowAddItems="@showAddItems"
                                          OnClose="HideAddItems"
                                          UnitOfWeight="@unitOfWeight" />
                    }
                </div>

            </div>
        </div>
        <div class="container-fluid mt-3">
            <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
            @* 
            TODO:
            <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button> *@
        </div>
    }
</CascadingValue>



@code {
    [Parameter] 
    public required string Id { get; set; }
    public Character Character = new Character();

    private bool showAddItems;
    private bool showUIMessage;
    private string UIMessage = string.Empty;
    private string unitOfWeight = "kg";
    private float weightTotal;

    protected override async Task OnInitializedAsync() {
        Character = await characterManager.GetByID(Id);

        GetWeightSum();
    }


    private async Task DeleteCharacter() {
        // string toDeleteName = character.Name;
        // bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        // if (!confirm) return;

        //await characterManager.Delete(character.Id);
    }

    private async void ShowAddItems() {
        showAddItems = true;
        Character = await characterManager.GetByID(Id);
        StateHasChanged();
    }
    private void HideAddItems() {
        showAddItems = false;
        StateHasChanged();
        GetWeightSum();
    }

    private void GetWeightSum() {
        weightTotal = 0;
        float weightProduct;
        if (Character.Inventory != null && Character.Inventory.Any()) {
            foreach (var inventoryItem in Character.Inventory) {
                @if (inventoryItem.Item != null) {
                    @if (inventoryItem.Item.Weight != null) {
                        weightProduct = inventoryItem.Item.Weight.Value * inventoryItem.Count;
                        weightTotal += weightProduct;
                    }
                }
            }
        }
    }

    private async Task IncreaseItemCount(Inventory inventoryItem) {
        showUIMessage = false;
        inventoryItem.Count++;
        await UpdateItemCount();
    }
    private async Task DecreaseItemCount(Inventory inventoryItem) {
        showUIMessage = false;
        if (inventoryItem.Count == 1) {

            await DeleteItemFromInventory(inventoryItem);
            return;
        }

        inventoryItem.Count--;
        await UpdateItemCount();
    }
    private async Task UpdateItemCount() {
        await characterManager.Update(Character);
        GetWeightSum();
        StateHasChanged();
    }

    private async Task DeleteItemFromInventory(Inventory inventoryItem) {
        try
        {
            if (Character.Inventory != null && Character.Inventory.Any())
            {
                var itemToRemove = Character.Inventory.FirstOrDefault(i => i.Item.Id == inventoryItem.Item.Id);

                if (itemToRemove != null)
                {

                    string itemName = itemToRemove.Item!.Name;
                    Character.Inventory!.Remove(itemToRemove);
                    UIMessage = $"Item '{itemName}' wurde aus dem Inventar entfernt";
                    showUIMessage = true;
                }
            }
            Character = await characterManager.Update(Character);

        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }

    }
}
