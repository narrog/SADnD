@page "/character-details/{id}"
@attribute [Authorize]
@inject SyncRepository<Character> characterManager
@inject APIRepository<Campaign> campaignManager
@inject NoteSyncManager noteManager
@inject IJSRuntime js
@inherits NotesCategoryParent

<CascadingValue Value="@this" IsFixed="true">
    @if (Character != null) {

        <h3>@Character.Name @isDeadText</h3>

        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-6 col-xl-4">
                    <p><strong>Rasse: </strong>@(Character.Race != null ? Character.Race.Name : "Unbekannt")</p>
                    @if (Character.Classes != null && Character.Classes.Any()) {
                        <p>
                            <strong>Klassen</strong>
                            <ul>
                                @foreach (var characterClass in Character.Classes) {
                                    @if (characterClass.Class != null) {
                                        <li>
                                            @characterClass.Class.Name, Level: @characterClass.Level
                                        </li>
                                    }
                                }
                            </ul>
                        </p>
                    }
                    else {
                        <p>Keine Klasse zugeordnet</p>
                    }

                    <p>
                        <strong>Kampagne: </strong>
                        @if (campaign != null) {
                            <a href="campaign-details/@Character.CampaignId" title="Kampagnen-Details öffnen">
                                <span class="oi oi-eye me-2 pointer"></span>@campaign.Name
                            </a>
                        }
                        else if (Character.UserId == appState.UserId) {
                            <a class="btn btn-outline-primary" @onclick="ShowAddCampaign">
                                Kampagne zuweisen
                            </a>
                        }
                    </p>




                </div>

                <div class="col-6 col-md-4 col-xl-2 p-0">
                    <h4>Trefferpunkte</h4>

                    <table class="w-100">
                        <tr class="table-row-height">
                            <td>@Character.Hitpoints / @Character.MaxHitpoints</td>
                            <td>
                                <a @onclick='() => ShowHitpointInput("healing")' title="Heilung erfassen" class="pointer text-success"><i class="bi bi-plus-circle-fill"></i></a>
                            </td>
                            <td>
                                <a @onclick='() => ShowHitpointInput("damage")' title="Schaden erfassen" class="pointer text-danger"><i class="bi bi-fire"></i></a>
                            </td>
                        </tr>
                        <tr class="table-row-height">
                            <td>temporär: @Character.TemporaryHitpoints</td>
                            <td>
                                <a @onclick='() => ShowHitpointInput("addTemporary")' title="Temporäre Hitpoints erfassen" class="pointer text-primary"><i class="bi bi-shield-fill-plus"></i></a>
                            </td>
                            <td>
                                <a @onclick="TempHitpointsRemove" title="Temporäre Hitpoints löschen" class="pointer text-danger"><i class="bi bi-shield-slash-fill"></i></a>
                            </td>
                        </tr>
                    </table>
                    @if (showHitpointsInput){
                        <InputNumber @bind-Value="@hitpointInt" min="1" class="form-control" />
                        <div class="mt-2">
                            <button class="btn btn-primary" type="button" @onclick="EditHitpoints">Speichern</button>
                            <button class="btn btn-outline-secondary" type="button" @onclick="CloseHitpointInput">Abbrechen</button>
                        </div>
                        @if (!string.IsNullOrEmpty(hitpointError)){
                            <div>
                                @hitpointError
                            </div>
                        }
                    }
                    @if (showDeathSaves) {
                        <div class="mt-2">
                            <strong>Rettungswürfe</strong>
                            <table class="w-100">
                                <tr class="table-row-height">
                                    <td>
                                        <a @onclick='() => AddDeathSaves(true)' title="Erfolg erfassen" class="pointer text-success"><i class="bi-plus-square-fill"></i></a> Erfolge
                                    </td>
                                    @for (int i = 0; i < 3; i++) {
                                        <td>
                                            <a @onclick='() => AddDeathSaves(true)' title="Erfolg erfassen" class="pointer"><i class="@GetIconClass(i, true)"></i></a>
                                        </td>
                                    }
                                </tr>
                                <tr class="table-row-height">
                                    <td>
                                        <a @onclick='() => AddDeathSaves(false)' title="Fehlschlag erfassen" class="pointer text-danger"><i class="bi-plus-square-fill"></i></a> Fehlschläge
                                    </td>
                                    @for (int i = 0; i < 3; i++) {
                                        <td>
                                            <a @onclick='() => AddDeathSaves(false)' title="Fehlschlag erfassen" class="pointer"><i class="@GetIconClass(i, false)"></i></a>
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                    }
                </div>

                @if (showCharacterDetails) {
                    <div class="col-12 col-md-6">
                        <p>
                            <strong>Grösse-Kategorie: </strong>@(Character.SizeCategory != null ? Character.SizeCategory : "Unbekannt")<br />
                            <strong>Grösse: </strong>@(Character.Size != null ? Character.Size : "Unbekannt")<br />
                            <strong>Geschlecht: </strong>@(Character.Sex != null ? Character.Sex : "Unbekannt")<br />
                            <strong>Gesinnung: </strong>@(Character.Alignment != null ? Character.Alignment : "Unbekannt")<br />
                            <strong>Alter: </strong>@(Character.Age != null ? Character.Age : "Unbekannt")<br />
                            <strong>Gewicht: </strong>@(Character.Weight != null ? Character.Weight : "Unbekannt")
                        </p>
                    </div>
                }
                @if (showAddCampaign) {
                    <div class="col-12 col-md-4 mt-3 mt-md-0">
                        <AddCampaignToCharacter CharacterId="@Id"
                        OnClose="HideAddCampaign" />
                    </div>
                }
                @if (showShareDetails) {
                    <div class="col-12 col-md-4 mt-3 mt-md-0">
                        <CharacterAccess OnClose="ShowShareDetails" />
                    </div>
                }
            </div>
            @if (!showAddCampaign) {
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-secondary me-2" @onclick="ShowCharacterDetails">
                            <span class="oi oi-eye me-2"></span> @showDetailsText
                        </button>
                        @if (Character.UserId == appState.UserId) {
                            <a class="btn btn-outline-primary me-2" href="/new-character/@Id">
                                <span class="oi oi-pencil me-2"></span> bearbeiten
                            </a>
                            @if (campaign != null) {
                                <button class="btn btn-outline-secondary me-2" @onclick="ShowShareDetails">
                                    <span class="oi oi-eye me-2"></span> Details teilen
                                </button>
                            }
                        }
                    </div>
                </div>
            }

            <div class="row mt-3">
                <div class="col-2 my-1" id="notes-icons-container">
                    <NotesCategoryIcons @bind-ActiveCategory="ActiveCategory"
                    OnCategoryChanged="HandleCategoryChanged"
                    CharacterId="@Character.Id"/>

                </div>

                <div class="col-10">
                    @if(ActiveCategory == "inventory") {
                        @if (!showAddItems) {
                            <InventoryView CharacterId="@Character.Id"
                            UnitOfWeight="@unitOfWeight" />
                            @if(Character.UserId == appState.UserId) {
                                <button class="btn btn-secondary mt-1" @onclick="ShowAddItems">Item hinzufügen</button>
                            }
                        }
                        else {
                            <InventoryItemAdd CharacterId="@Character.Id"
                            OnClose="HideAddItems"
                            UnitOfWeight="@unitOfWeight" />
                        }

                    }
                    else {
                        @if (!ShowAddNotes)
                        {
                            <NotesView NotesCategory="@ActiveCategory"
                            CharacterId="@Character.Id"
                            OnEditNote="ShowAddNotesAsync" />
                            @if (Character.UserId == appState.UserId) {
                                <button class="btn btn-secondary mt-1" @onclick="() => ShowAddNotesAsync(0)">Notiz hinzufügen</button>
                            }
                        }
                        else {
                            <NotesAdd NotesCategory="@ActiveCategory"
                            SelectedNoteId="@SelectedNoteId"
                            CharacterId="@Character.Id"
                            OnClose="HideAddNotesAsync" />
                        }

                    }
                </div>
            </div>
        </div>
        <div class="container-fluid mt-3">
            <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
            @if (Character.UserId == appState.UserId) {
                <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button>
            }
        </div>
    }
</CascadingValue>



@code {
    [CascadingParameter]
    private CascadingAppState appState { get; set; }
    [Parameter] 
    public required string Id { get; set; }
    public Character Character = new Character();

    private bool showAddCampaign;
    public Campaign? campaign;
    private List<(ApplicationUser User, Character Character)> playerCharacters;

    private bool showCharacterDetails;
    private string showDetailsText = "Details anzeigen";
    public new string ActiveCategory = "inventory";

    private bool showAddItems;
    private string unitOfWeight = "kg";

    private bool showShareDetails;
    private string userId = "";

    private bool showHitpointsInput;
    private string hitpointInputType = "";
    private int hitpointInt;
    private string hitpointError = "";
    private bool showDeathSaves;
    private List<bool> DeathRoles = new List<bool>();
    private int successCount;
    private int failCount;
    private string isDeadText = "";

    protected override async Task OnInitializedAsync() {
        await appState.EnsureCharacters();
        await appState.EnsureCampaigns();
        await appState.EnsureNotes();

        userId = appState.UserId;

        Character = await characterManager.GetByID(Id);

        if (Character == null){
            navManager.NavigateTo("/access-denied");
            return;
        } 

        if (Character.UserId == userId || (Character.UserAccess != null && Character.UserAccess.Any(x => x.Id == userId))){
            campaign = Character.CampaignId != null ? appState.Campaigns.FirstOrDefault(c => c.Id == Character.CampaignId) : null;
        }
        else {
            navManager.NavigateTo("/access-denied");
        }

        if (Character.Hitpoints == 0)
            showDeathSaves = true;

        CountDeathRoles();
        if (failCount == 3)
            isDeadText = "(tot)";
    }

    private async Task DeleteCharacter() {
        string toDeleteName = Character.Name;
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?\r\nAlle Notizen werden ebenfalls gelöscht.\r\nDas Löschen kann nicht Rückgängig gemacht werden");
        if (!confirm) return;

        await characterManager.Delete(Character.Id);
        appState.Characters.Remove(Character);
        await js.InvokeVoidAsync("history.back");
    }

    private void ShowCharacterDetails() {
        showShareDetails = false;
        showCharacterDetails = !showCharacterDetails;
        showDetailsText = showCharacterDetails ? "Details ausblenden" : "Details anzeigen";
        StateHasChanged();
    }
    private void ShowShareDetails() {
        if (showCharacterDetails)
            ShowCharacterDetails();
        showShareDetails = !showShareDetails;
        StateHasChanged();
    }
    private void ShowAddItems() {
        showAddItems = true;
        StateHasChanged();
    }
    private void HideAddItems() {
        showAddItems = false;
        StateHasChanged();
    }

    private void ShowAddCampaign() {
        if (showCharacterDetails)
            ShowCharacterDetails();
        showAddCampaign = true;
        StateHasChanged();
    }
    private void HideAddCampaign() {
        showAddCampaign = false;
        Character = appState.Characters.FirstOrDefault(c => c.Id == Int32.Parse(Id));
        campaign = Character.CampaignId != null ? appState.Campaigns.FirstOrDefault(c => c.Id == Character.CampaignId) : null;
        StateHasChanged();
    }

    public async Task UpdateCharacter(){
        Character = await characterManager.Update(Character);
        appState.Characters[appState.Characters.FindIndex(c => c.Id == Character.Id)] = Character;
    }

    private void ShowHitpointInput(string hitpointType) {
        hitpointInputType = hitpointType;
        showHitpointsInput = true;
    }
    private void CloseHitpointInput(){
        showHitpointsInput = false;
    }

    private void EditHitpoints() {
        if (hitpointInt < 1) {
            hitpointError = "Bitte Eingabe überprüfen";
            return;
        }

        switch (hitpointInputType) {
            case "healing":
                HitpointsHealing();
                break;
            case "damage":
                HitpointsDamage();
                break;
            case "addTemporary":
                TempHitpointsAdd();
                break;
            default:
                Console.WriteLine("Ungültiger Eingabetyp: " + hitpointInputType);
                break;
        }
    }
    private async void HitpointsHealing() {
        Character.Hitpoints += hitpointInt;
        if (Character.Hitpoints > Character.MaxHitpoints) {
            Character.Hitpoints = Character.MaxHitpoints;
        }
        Character.DeathRoles = null;
        showDeathSaves = false;
        CountDeathRoles();
        isDeadText = "";
        await SaveHitpoints();
    }
    private async void HitpointsDamage() {
        if (Character.TemporaryHitpoints == 0){
            Character.Hitpoints -= hitpointInt;
            if (Character.Hitpoints <= 0){
                Character.Hitpoints = 0;
                showDeathSaves = true;
            }
        }
        else {
            Character.TemporaryHitpoints -= hitpointInt;
            if (Character.TemporaryHitpoints < 0) {
                Character.Hitpoints += Character.TemporaryHitpoints;
                Character.TemporaryHitpoints = 0;
            }
        }

        await SaveHitpoints();
    }
    private async void TempHitpointsAdd() {
        Character.TemporaryHitpoints += hitpointInt;

        await SaveHitpoints();
    }
    private async void TempHitpointsRemove() {
        Character.TemporaryHitpoints = 0;

        await SaveHitpoints();
    }
    private async Task SaveHitpoints(){
        CloseHitpointInput();
        hitpointInt = 0;
        await characterManager.Update(Character);
    }

    private async void AddDeathSaves(bool isSuccess) {
        CountDeathRoles();

        if (isSuccess && successCount < 3) {
            Character.DeathRoles!.Add(true);
        }
        else if (!isSuccess && failCount < 3) {
            Character.DeathRoles!.Add(false);
            if (failCount == 2){
                isDeadText = "(tot)";
                StateHasChanged();
            }
        }
        await characterManager.Update(Character);
    }
    private string GetIconClass(int index, bool isSuccess) {
        CountDeathRoles();
        string iconClass = "";
        if (isSuccess && index < successCount)
            iconClass = "bi bi-square-fill text-success";
        else if (!isSuccess && index < failCount)
            iconClass = "bi bi-square-fill text-danger";
        else
            iconClass = "bi bi-square-fill text-dark";

        return iconClass;
    }

    private void CountDeathRoles(){
        if(Character.DeathRoles != null){
            successCount = Character.DeathRoles.Count(d => d);
            failCount = Character.DeathRoles.Count(d => !d);
        }
        else {
            Character.DeathRoles = new List<bool>();
        }
    }
}
