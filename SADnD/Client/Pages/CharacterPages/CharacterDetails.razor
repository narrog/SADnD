@page "/character-details/{id}"
@attribute [Authorize]
@inject CharacterApiManager characterManager
@inject CampaignApiManager campaignManager
@inject NoteApiManager noteManager
@inject IJSRuntime js
@inherits NotesCategoryParent 

<CascadingValue Value="@this" IsFixed="true">
    @if (Character != null) {
        <h3>"@Character.Name"</h3>

        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-12 col-md-6 col-xl-4">
                    <p><strong>Rasse: </strong>@(Character.Race != null ? Character.Race.Name : "Unbekannt")</p>
                    @if (Character.Classes != null && Character.Classes.Any()) {
                        <p>
                            <strong>Klassen</strong>
                            <ul>
                                @foreach (var characterClass in Character.Classes) {
                                    @if (characterClass.Class != null) {
                                        <li>
                                            @characterClass.Class.Name, Level: @characterClass.Level
                                        </li>
                                    }
                                }
                            </ul>
                        </p>
                    }
                    else {
                        <p>Keine Klasse zugeordnet</p>
                    }

                    <p>
                        <strong>Kampagne: </strong>
                        @if (campaign != null) {
                            <a href="campaign-details/@Character.CampaignId" title="Kampagnen-Details öffnen">
                                <span class="oi oi-eye me-2 pointer"></span>@campaign.Name
                            </a>
                        }
                        else {
                            <a class="btn btn-outline-primary" @onclick="ShowAddCampaign">
                                Kampagne zuweisen
                            </a>
                        }
                    </p>

                    @* TODO:
                    <p><strong>Trefferpunkte: </strong>@Character.Hitpoints </p>
                    <p><strong>Spellslots: </strong></p> *@


                </div>
                @if (showCharacterDetails) {
                    <div class="col-12 col-md-6">
                        <p>
                            <strong>Grösse-Kategorie: </strong>@(Character.SizeCategory != null ? Character.SizeCategory : "Unbekannt")<br />
                            <strong>Grösse: </strong>@(Character.Size != null ? Character.Size : "Unbekannt")<br />
                            <strong>Geschlecht: </strong>@(Character.Sex != null ? Character.Sex : "Unbekannt")<br />
                            <strong>Gesinnung: </strong>@(Character.Alignment != null ? Character.Alignment : "Unbekannt")<br />
                            <strong>Alter: </strong>@(Character.Age != null ? Character.Age : "Unbekannt")<br />
                            <strong>Gewicht: </strong>@(Character.Weight != null ? Character.Weight : "Unbekannt")
                        </p>
                    </div>
                }
                @if (showAddCampaign) {
                    <div class="col-12 col-md-4 mt-3 mt-md-0">
                        <AddCampaignToCharacter CharacterId="@Id"
                        OnClose="HideAddCampaign" />
                    </div>
                }
            </div>
            @if (!showAddCampaign) {
                <div class="row mt-3">
                    <div class="col-12">
                        <button class="btn btn-outline-secondary" @onclick="ShowCharacterDetails">
                            <span class="oi oi-eye me-2"></span> @showDetailsText
                        </button>
                        <a class="btn btn-outline-primary" href="/new-character/@Id">
                            <span class="oi oi-pencil me-2"></span> bearbeiten
                        </a>
                    </div>
                </div>
            }

            <div class="row mt-3">
                    <div class="col-2 my-1" id="notes-icons-container">
                    <NotesCategoryIcons @bind-ActiveCategory="ActiveCategory"
                                        OnCategoryChanged="HandleCategoryChanged"
                                        CharacterId="@Character.Id"/>
                                        
                </div>

                <div class="col-10">
                    @if(ActiveCategory == "inventory") {
                        @if (!showAddItems) {
                            <InventoryView CharacterId="@Character.Id"
                                           UnitOfWeight="@unitOfWeight" />
                            <button class="btn btn-secondary mt-1" @onclick="ShowAddItems">Item hinzufügen</button>
                        }
                        else {
                            <InventoryItemAdd CharacterId="@Character.Id"
                                              OnClose="HideAddItems"
                                              UnitOfWeight="@unitOfWeight" />
                        }

                    }
                    else {
                        @if (!ShowAddNotes)
                        {
                            <NotesView NotesCategory="@ActiveCategory"
                                       CharacterId="@Character.Id"
                                       OnEditNote="ShowAddNotesAsync" />
                            <button class="btn btn-secondary mt-1" @onclick="() => ShowAddNotesAsync(0)">Notiz hinzufügen</button>
                        }
                        else {
                            <NotesAdd NotesCategory="@ActiveCategory"
                                      SelectedNoteId="@SelectedNoteId"
                                      CharacterId="@Character.Id"
                                      OnClose="HideAddNotesAsync" />
                        }

                    }
                </div>
            </div>
        </div>
        <div class="container-fluid mt-3">
            <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
            <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button>
        </div>
    }
</CascadingValue>



@code {
    [CascadingParameter]
    private CascadingAppState appState { get; set; }
    [Parameter] 
    public required string Id { get; set; }
    public Character Character = new Character();

    private bool showAddCampaign;
    private Campaign? campaign;
    private List<(ApplicationUser User, Character Character)> playerCharacters;

    private bool showCharacterDetails;
    private string showDetailsText = "Details anzeigen";
    public new string ActiveCategory = "inventory";

    private bool showAddItems;
    private string unitOfWeight = "kg";
    // public bool ShowAddNotes { get; private set; } = false;
    // public int SelectedNoteId { get; private set; } = 0;

    protected override async Task OnInitializedAsync() {
        await appState.EnsureCharacters();
        await appState.EnsureNotes();
        Character = appState.Characters.FirstOrDefault(c => c.Id == Int32.Parse(Id));
        // Character = await characterManager.GetByID(Id);
        // await appState.GetNotes();
        campaign = Character.CampaignId != null ? appState.Campaigns.FirstOrDefault(c => c.Id == Character.CampaignId) : null;
    }

    private async Task DeleteCharacter() {
        string toDeleteName = Character.Name;
        bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?\r\nAlle Notizen werden ebenfalls gelöscht.\r\nDas Löschen kann nicht Rückgängig gemacht werden");
        if (!confirm) return;

        await characterManager.Delete(Character.Id);
        appState.Characters.Remove(Character);
        await js.InvokeVoidAsync("history.back");
    }

    private void ShowCharacterDetails() {
        showCharacterDetails = !showCharacterDetails;
        showDetailsText = showCharacterDetails ? "Details ausblenden" : "Details anzeigen";
        StateHasChanged();
    }

    private async void ShowAddItems() {
        showAddItems = true;
        // Character = await characterManager.GetByID(Character.Id);
        StateHasChanged();
    }
    private async void HideAddItems() {
        // Character = await characterManager.GetByID(Character.Id);
        showAddItems = false;
        StateHasChanged();
    }

    private void ShowAddCampaign() {
        if (showCharacterDetails)
            ShowCharacterDetails();
        showAddCampaign = true;
        StateHasChanged();
    }
    private async Task HideAddCampaign() {
        showAddCampaign = false;
        Character = await characterManager.GetByID(Id);
        campaign = Character.CampaignId != null ? await campaignManager.GetByID(Character.CampaignId) : null;
        StateHasChanged();
    }
    // public void HandleCategoryChanged()
    // {
    //     ShowAddNotes = false;
    // }

    // public Task ShowAddNotesAsync(int noteId)
    // {
    //     SelectedNoteId = noteId;
    //     ShowAddNotes = true;
    //     return Task.CompletedTask;
    // }

    // public Task HideAddNotesAsync()
    // {
    //     ShowAddNotes = false;
    //     return Task.CompletedTask;
    // }
}
