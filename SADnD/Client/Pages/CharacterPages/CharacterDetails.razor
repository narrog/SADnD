@page "/character-details/{id}"
@using SADnD.Client.Pages.CharacterPages.InventoryPages
@using SADnD.Client.Pages.CharacterPages.Notes
@using Newtonsoft.Json
@attribute [Authorize]
@inject CharacterSyncManager characterManager
@inject IJSRuntime js

<CascadingValue Value="@this" IsFixed="true">
    @if (Character != null) {
        <h3>"@Character.Name"</h3>

        <div class="container-fluid mt-3">
            <div class="row">
                <div class="col-12 col-md-6">
                    <p><strong>Rasse: </strong>@(Character.Race != null ? Character.Race.Name : "Unbekannt")</p>
                    @if (Character.Classes != null && Character.Classes.Any()) {
                        <p>
                            <strong>Klassen</strong>
                            <ul>
                                @foreach (var characterClass in Character.Classes) {
                                    @if (characterClass.Class != null) {
                                        <li>
                                            @characterClass.Class.Name, Level: @characterClass.Level
                                        </li>
                                    }
                                }
                            </ul>
                        </p>
                    }
                    else {
                        <p>Keine Klasse zugeordnet</p>
                    }
                    @* TODO:
                    <p><strong>Trefferpunkte: </strong>@Character.Hitpoints </p>
                    <p><strong>Spellslots: </strong></p> *@
                    <button class="btn btn-outline-secondary mt-md-5" @onclick="ShowCharacterDetails">
                        <span class="oi oi-eye me-2"></span> @showDetailsText
                    </button>
                   
                </div>
                @if (showCharacterDetails) {
                    <div class="col-12 col-md-6 mt-sm-3">
                        <p>
                            <strong>Grösse-Kategorie: </strong>@(Character.SizeCategory != null ? Character.SizeCategory : "Unbekannt")<br />
                            <strong>Grösse: </strong>@(Character.Size != null ? Character.Size : "Unbekannt")<br />
                            <strong>Geschlecht: </strong>@(Character.Sex != null ? Character.Sex : "Unbekannt")<br />
                            <strong>Gesinnung: </strong>@(Character.Alignment != null ? Character.Alignment : "Unbekannt")<br />
                            <strong>Alter: </strong>@(Character.Age != null ? Character.Age : "Unbekannt")<br />
                            <strong>Gewicht: </strong>@(Character.Weight != null ? Character.Weight : "Unbekannt")
                        </p>
                    </div>
                    @* TODO:
                        <div class="col-12 col-md-2">
                            <button class="btn btn-outline-primary" @onclick="EditCharacterDetails">bearbeiten</button> 
                        </div> 
                        *@
                }
            </div>
            <div class="row mt-3">
                <div class="col-12 col-md-2" id="notes-icons-container">
                    <CharacterNotesIcons @bind-ActiveCategory="activeCategory" />
                </div>
                
                @* TODO:
                    Inhalt Dynamisch anpassen, je nach dem, welcher "Menüpunkt" angewählt wird
                *@
                @if(activeCategory == "inventory") {
                    <InventoryView Character="@Character"/>
                }
            </div>
        </div>
        <div class="container-fluid mt-3">
            <a class="btn btn-outline-primary me-2" onclick="history.back();">Zurück</a>
            @* 
            TODO:
            <button class="btn btn-outline-danger" @onclick="DeleteCharacter">Löschen</button> *@
        </div>
    }
</CascadingValue>



@code {
    [Parameter] 
    public required string Id { get; set; }
    public Character Character = new Character();

    private bool showCharacterDetails;
    private string showDetailsText = "Details anzeigen";
    public string activeCategory = "inventory";

    protected override async Task OnInitializedAsync() {
        Character = await characterManager.GetByID(Id);
    }


    private async Task DeleteCharacter() {
        // string toDeleteName = character.Name;
        // bool confirm = await js.InvokeAsync<bool>("confirm", $"Soll der Eintrag '{toDeleteName}' wirklich gelöscht werden?");
        // if (!confirm) return;

        //await characterManager.Delete(character.Id);
    }
    private void ShowCharacterDetails() {
        showCharacterDetails = !showCharacterDetails;
        showDetailsText = showCharacterDetails ? "Details ausblenden" : "Details anzeigen";
        StateHasChanged();
    }


}
