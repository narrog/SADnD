@inject SyncRepository<Character> characterManager

<div class="container-fluid mt-3">
    <div class="row">
        @if (characters != null) {
            @foreach (Character character in characters) {
                <div class="col-12 col-md-4 p-1 d-flex" style="cursor: pointer;">
                    <div class="p-2 bg-dark text-light w-100" @onclick="() => OpenCharacterDetails(character.Id)">
                        <h4>@character.Name</h4>
                        <div class="d-none d-md-block">
                            <p>Rasse: @(character.Race != null ? character.Race.Name : "Unbekannt")</p>
                            @if (character.Classes != null && character.Classes.Any()) {
                                <p>Klassen
                                <ul>
                                    @foreach (var characterClass in character.Classes) {
                                        @if (characterClass.Class != null) {
                                            <li>
                                                @characterClass.Class.Name, Level: @characterClass.Level
                                            </li>
                                        }
                                    }
                                </ul>
                                </p>
                            }
                            else {
                                <p>Keine Klasse zugeordnet</p>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        <div class="mt-2 p-1">
            <a class="btn btn-primary me-2" href="new-character">hinzufügen</a>
            @if (!ShowAll) {
                <a class="btn btn-primary me-2" href="/all-characters">Alle anzeigen</a>
            }
        </div>
    </div>
</div>



@code {
    [CascadingParameter]
    CascadingAppState appState { get; set; }
    [Parameter] public bool ShowAll { get; set; }
    string controllerName = "character";
    private IEnumerable<Character>? characters;

    protected override async Task OnInitializedAsync()
    {
        await appState.EnsureCharacters();
        if (appState.Characters != null) {
            if (!ShowAll)
            {
                characters = appState.Characters.Count() < 3 ? appState.Characters.Take(appState.Characters.Count()) : appState.Characters.Take(3);
            }
            else
                characters = appState.Characters;
        }
    }

    private void OpenCharacterDetails(int id) {
        navManager.NavigateTo($"character-details/{id}");
    }
}
