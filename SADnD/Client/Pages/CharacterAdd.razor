@page "/new-character"

@attribute [Authorize]
@using Newtonsoft.Json
@using System.Security.Claims
@inject IJSRuntime js

@inject CharacterManager characterManager
@inject ClassManager classManager
@inject RaceManager raceManager

<h3>Charakter hinzufügen</h3>

@if (races != null && AvailableClasses != null) {
    <EditForm Model="@character" OnValidSubmit="@Post">
        <div class="container-fluid mt-3">
            <DataAnnotationsValidator />
            <div class="row">
                
                <div class="col-12 col-md-8 p-1">
                    Name:<br /><InputText @bind-Value="@character.Name"></InputText>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-md-4 p-1">
                    Rasse:<br />
                    <InputSelect @bind-Value="@character.RaceId">
                        <option selected value="0">Bitte auswählen</option>
                        @foreach (var race in races) {
                            <option value="@race.Id">@race.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-md-4 p-1">
                    Klasse:<br />
                    @* @foreach (var classItem in AvailableClasses) {
                        <div>
                            <input type="checkbox" @onchange="(e => UpdateSelection(classItem.Id, (bool)e.Value))" />
                            <label>@classItem.Name</label>
                        </div>
                    } *@
                    @foreach (var charClass in character.Classes)
                    {
                        <p>
                            <InputSelect @bind-Value="@charClass.ClassId">
                                <option selected value="0">Bitte auswählen</option>
                                @foreach (var characterClass in AvailableClasses) {
                                    <option value="@characterClass.Id">@characterClass.Name</option>
                                }
                            </InputSelect>
                            <InputNumber @bind-Value="@charClass.Level">
                            </InputNumber>
                            <button onclick="@AddClass">+</button>
                        </p>                     
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Alter:<br />
                    <InputNumber @bind-Value="@character.Age"></InputNumber>
                </div>
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Grössen-Kategorie:<br />
                    <InputText @bind-Value="@SizeCategoryString"></InputText>
                </div>
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Grösse:<br />
                    <InputNumber @bind-Value="@character.Size"></InputNumber>
                </div>
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Gewicht:<br />
                    <InputNumber @bind-Value="@character.Weight"></InputNumber>
                </div>
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Geschlecht:<br />
                    <InputText @bind-Value="@character.Sex"></InputText>
                </div>
                <div class="col-6 col-md-4 col-lg-2 p-1">
                    Alignment:<br />
                    <InputText @bind-Value="@character.Alignment"></InputText>
                </div>
                <div class="mt-3">
                    <button type="submit" class="btn btn-primary me-2">Speichern</button>
                    <button class="btn btn-secondary" type="button" @onclick="CancelButtonPressed">Abbrechen</button>
                </div>
            </div>

            <ValidationSummary class="mt-3" />
        </div>
    </EditForm>

}
<div class="mt-3">
    @UIMessage
</div>

@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    private Character character = new Character() { 
        Classes = new List<CharacterClass>() { 
            new CharacterClass() { Level = 1 } 
        }
    };
    private IEnumerable<Class> AvailableClasses;
    private IEnumerable<Race> races;
    string UIMessage = "";
    string controllerName = "character";
    string message = "";
    string name = "";
    private string? SizeCategoryString {
        get => character.SizeCategory.ToString();
        set {
            if (!string.IsNullOrEmpty(value)) {
                character.SizeCategory = value[0]; // Nimmt das erste Zeichen
            }
        }
    }

    protected override async Task OnInitializedAsync() {
        AvailableClasses = await classManager.GetAll();
        races = await raceManager.GetAll();

        character.UserId = appState.UserId;

        foreach (var classItem in AvailableClasses) {
            SelectedClassIds[classItem.Id] = false; // Standardwert ist false (nicht ausgewählt)
        }
    }

    private async void Post() {

        try {
            var selectedClasses = AvailableClasses
            .Where(c => SelectedClassIds.ContainsKey(c.Id) && SelectedClassIds[c.Id])
            .ToList();

            // Hier aktualisieren Sie Ihr Modell
            // character.Classes = selectedClasses;
            // foreach (var x in character.Classes) {
            //     Console.WriteLine($"gewählte Klasse: {x.Id} - {x.Name}");
            // }

            message = JsonConvert.SerializeObject(await characterManager.Insert(character));
            Console.WriteLine($"message: {message}");

            //await js.InvokeVoidAsync("history.back");
        }
        catch (Exception ex) {
            UIMessage = ex.Message;
            Console.WriteLine($"{ex.Message}");
            StateHasChanged();
        }
    }
    private async void CancelButtonPressed() {
        bool confirm = await js.InvokeAsync<bool>("confirm", "Eingabe wirklich abbrechen");
        if (confirm)
            await js.InvokeVoidAsync("history.back");
        else
            return;
    }

    private void AddClass()
    {
        character.Classes.Add(new CharacterClass(){
            CharacterId = character.Id, 
            Level = 1
        });
    }

    // Die ausgewählten Klassen-IDs
    private Dictionary<int, bool> SelectedClassIds = new();

    // Methode zum Aktualisieren der Auswahl
    private void UpdateSelection(int classId, bool isSelected) {
        SelectedClassIds[classId] = isSelected;
    }
}
