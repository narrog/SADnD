@inject NoteSyncManager noteManager

@if(note != null){
    <EditForm Model="@note" OnValidSubmit="@Post" class="w-100">
        <DataAnnotationsValidator />
        <p>
            <label for="title">Titel: </label>
            <InputText @bind-Value="@note.Name" id="title" class="form-control"></InputText>
        </p>
        <p>
            <label for="text">Text: </label>
            <InputTextArea @bind-Value="@note.Content" id="text" class="form-control" rows="7"></InputTextArea>
        </p>
    @if (note is NotePerson notePerson) {
            <p>
                <label for="location">Ort:</label>
                <InputText @bind-Value="notePerson.Location" id="location" class="form-control"></InputText>
            </p>
            <p>
                <label for="affiliation">Zugehörigkeit:</label>
                <InputText @bind-Value="notePerson.Affiliation" id="affiliation" class="form-control"></InputText>
            </p>
        }

        <SubmitButton />
        <button class="btn btn-outline-secondary me-2" type="button" @onclick="Close">Abbrechen</button>

        <ValidationSummary class="mt-3" />
    </EditForm>
}


@code {
    [CascadingParameter]
    public CascadingAppState appState { get; set; }
    [Parameter]
    public required string NotesCategory { get; set; }
    [Parameter]
    public int SelectedNoteId { get; set; }
    [Parameter]
    public int CharacterId { get; set; }
    [Parameter]
    public int CampaignId { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }

    private Note? note;


    protected override async Task OnInitializedAsync()
    {
        await appState.EnsureNotes();
        if(SelectedNoteId == 0){
            note = NotesCategory switch
            {
                "story" => new NoteStory(),
                "people" => new NotePerson(),
                "locations" => new NoteLocation(),
                "quest" => new NoteQuest(),
                "hints" => new NoteHint(),
                _ => throw new InvalidOperationException($"Unbekannte NotesCategory: {NotesCategory}")
            };
            note.UserId = appState.UserId;
        }
        else {
            note = appState.Notes.FirstOrDefault(n => n.Id == SelectedNoteId);
        }

    }

    private async void Post() {
        try {
            if(CharacterId != 0){
                note.CharacterId = CharacterId;
            }
            else if(CampaignId != 0){
                note.CampaignId = CampaignId;
            }

            if (SelectedNoteId == 0) {
                note = await noteManager.Insert(note);
                appState.Notes.Add(note);
            }
            else
            {
                note = await noteManager.Update(note);
                var index = appState.Notes.FindIndex(n => n.Id == SelectedNoteId);
                appState.Notes[index] = note;
            }
            await Close();
        }
        catch (Exception ex) {
            Console.WriteLine($"{ex.Message}");
        }
    }
    private async Task Close() {
        await OnClose.InvokeAsync();
    }
}
